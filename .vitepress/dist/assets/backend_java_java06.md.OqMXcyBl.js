import{$ as t,U as n,c as i,aA as e,ab as s,S as h}from"./chunks/framework.BDLhZlrp.js";const k="/knowledge-map/assets/image-12.BRYiAPkg.png",b=JSON.parse('{"title":"6. 常用类","description":"","frontmatter":{"prev":{"text":"异常","link":"/backend/java/java05"},"next":{"text":"集合框架","link":"/backend/java/java07"}},"headers":[],"relativePath":"backend/java/java06.md","filePath":"backend/java/java06.md","lastUpdated":1717049326000}'),p={name:"backend/java/java06.md"},d=e(`<h1 id="_6-常用类" tabindex="-1">6. 常用类 <a class="header-anchor" href="#_6-常用类" aria-label="Permalink to &quot;6. 常用类&quot;">​</a></h1><h2 id="_6-1-string-类" tabindex="-1">6.1 String 类 <a class="header-anchor" href="#_6-1-string-类" aria-label="Permalink to &quot;6.1 String 类&quot;">​</a></h2><h3 id="初识-string" tabindex="-1">初识 String <a class="header-anchor" href="#初识-string" aria-label="Permalink to &quot;初识 String&quot;">​</a></h3><ol><li>Java 中的 String 属于引用数据类型，代表字符串。</li><li>Java 专门在堆中为字符串准备了一个字符串常量池。因为字符串使用比较频繁，放在字符串常量池中省去了对象的创建过程，从而提高程序的执行效率。（常量池属于一种缓存技术，缓存技术是提高程序执行效率的重要手段。）</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true 说明s1和s2指向了字符串常量池中的同一个字符串对象。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s3指向字符串常量池，s4指向堆内存</span></span></code></pre></div><p>注意：字符串字面量在编译的时候就已经确定了将其放到字符串常量池中。JVM 启动时会立即程序中带有双引号的字符串全部放入字符串常量池。</p><ol start="3"><li>Java8 之后字符串常量池在堆中。Java8 之前字符串常量池在永久代。</li><li>字符串一旦创建是不可变的。（底层 String 源码中有一个属性：<code>private final byte[] value;</code>）</li></ol><ul><li><code>String s = &quot;hello&quot;;</code> 其中 &quot;hello&quot; 存储在字符串常量池中。</li><li>&quot;hello&quot; 不可变。不能变成 &quot;hello123&quot;。如果进行字符串拼接，必然创建新的字符串对象。</li><li>是 &quot;hello&quot; 不可变，不是 s 不可变，s 可以指向其它的字符串对象：<code>s = &quot;xyz&quot;;</code>。</li></ul><h3 id="string-的拼接" tabindex="-1">String 的拼接 <a class="header-anchor" href="#string-的拼接" aria-label="Permalink to &quot;String 的拼接&quot;">​</a></h3><ol><li>动态拼接之后的新字符串不会自动放到字符串常量池中：</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false 说明拼接后的字符串并没有放到字符串常量池</span></span></code></pre></div><p>s3 指向的对象没有在字符串常量池中，而是在堆中；在底层进行 <code>+</code> 操作时，加符号两边至少有一个是变量的时候，会创建一个 <code>StringBuilder</code> 对象，进行字符串的拼接。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在编译阶段，s1 即拼接生成放在字符串常量池中</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">扩展知识-<code>intern()</code></p><p>将堆中的字符串变量放到字符串常量池中：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div></div><p>以上程序中字符串常量中有三个： &quot;abc&quot;, &quot;def&quot;, &quot;abcdef&quot;，除了字符串常量池的字符串之外，在堆中还有一个字符串对象 &quot;abcdef&quot;。</p><ol><li>两个字符串字面量拼接会做编译阶段的优化，在编译阶段就会进行字符串的拼接。</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aaa&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>以上程序会在编译阶段进行拼接，因此以上程序在字符串常量池中只有一个： &quot;aaabbb&quot;。</p><h3 id="string-类常用的构造方法" tabindex="-1">String 类常用的构造方法 <a class="header-anchor" href="#string-类常用的构造方法" aria-label="Permalink to &quot;String 类常用的构造方法&quot;">​</a></h3><ol><li><code>String(char[] value)</code>：根据字符数组创建一个新的字符串对象。</li><li><code>String(char[] value, int offset, int count)</code>：根据字符数组的指定部分创建一个新的字符串对象。</li><li><code>String(byte[] bytes)</code>：根据字节数组创建一个新的字符串对象，默认使用平台默认的字符集进行解码。</li><li><code>String(byte[] bytes, int offset, int length)</code>：根据字节数组的指定部分创建一个新的字符串对象，默认使用平台默认的字符集进行解码。</li><li><code>String(byte[] bytes, Charset charset)</code>：根据字节数组和指定的字符集创建一个新的字符串对象, <code>new String(bytes, Charset.defaultCharset());</code></li><li><code>String(byte[] bytes, String charsetName)</code>：</li></ol><ul><li>根据字节数组和指定的字符集名称创建一个新的字符串对象。</li><li>这是一个解码的过程。你需要提前知道 &quot;byte[] bytes&quot; 是通过哪个编码方式进行编码得到的。</li><li>如果通过 GBK 的方式进行编码得到的 &quot;byte[] bytes&quot;，调用以上构造方法时采用 UTF-8 的方式进行解码，就会出现乱码。</li></ul><ol start="7"><li><code>String(String original)</code>：</li></ol><ul><li>通过复制现有字符串创建一个新的字符串对象。</li><li>这个方法被 <code>@IntrinsicCandidate</code> 标注，这个注解的作用是告诉编译器,该方法或构造函数是一个内在的候选方法,可以被优化和替换为更高效的代码。因此它是不建议使用的。</li><li><code>new String(&quot;hello&quot;);</code> 这个代码会让常量池中有一个 &quot;hello&quot;，并且在堆中也有有一个 String 对象。</li></ul><h3 id="string-的常用方法" tabindex="-1">String 的常用方法 <a class="header-anchor" href="#string-的常用方法" aria-label="Permalink to &quot;String 的常用方法&quot;">​</a></h3><ul><li><p><code>char charAt(int index);</code>: 返回索引处的 char 值。</p></li><li><p><code>int length();</code>: 获取字符串长度。</p></li><li><p><code>boolean isEmpty();</code>: 判断字符串是否为空字符串，如果 length() 是 0 就是空字符串。</p></li><li><p><code>boolean equals(Object anObject);</code>: 判断两个字符串是否相等。</p></li><li><p><code>boolean equalsIgnoreCase(String anotherString);</code>: 判断两个字符串是否相等，忽略大小写。</p></li><li><p><code>boolean contains(CharSequence s);</code>: 判断当前字符串中是否包含某个子字符串。</p></li><li><p><code>boolean startsWith(String prefix);</code>: 判断当前字符串是否以某个字符串开头。</p></li><li><p><code>boolean endsWith(String suffix);</code>: 判断当前字符串是否以某个字符串结尾。</p></li><li><p><code>int compareTo(String anotherString);</code>: 两个字符串按照字典顺序比较大小。</p></li><li><p><code>int compareToIgnoreCase(String str);</code>: 两个字符串按照字典顺序比较大小，比较时忽略大小写。</p></li><li><p><code>int indexOf(String str);</code> 获取当前字符串中 str 字符串的第一次出现处的下标。</p></li><li><p><code>int indexOf(String str, int fromIndex);</code>: 从当前字符串的 fromIndex 下标开始往右搜索，获取当前字符串中 str 字符串的第一次出现处的下标。</p></li><li><p><code>int lastIndexOf(String str);</code> 获取当前字符串中 str 字符串的最后一次出现处的下标。</p></li><li><p><code>int lastIndexOf(String str, int fromIndex);</code>: 从当前字符串的 fromIndex 下标开始往左搜索，获取当前字符串中 str 字符串的最后一次出现处的下标。</p></li><li><p><code>byte[] getBytes();</code>: 将字符串转换成字节数组。其实就是对字符串进行编码。默认按照系统默认字符集。</p></li><li><p><code>byte[] getBytes(String charsetName);</code>: 将字符串按照指定字符集的方式进行编码。</p></li><li><p><code>byte[] getBytes(Charset charset);</code></p></li><li><p><code>char[] toCharArray();</code>: 将字符串转换字符数组。</p></li><li><p><code>String toLowerCase();</code>: 转小写</p></li><li><p><code>String toUpperCase();</code>: 转大写</p></li><li><p><code>String concat(String str);</code>: 进行字符串的拼接操作。和 <code>+</code> 的区别？</p><ul><li><code>+</code> 既可以进行求和，也可以进行字符串的拼接，底层拼接时会创建 StringBuilder 对象进行拼接。<code>+</code> 拼接 null 时不会出现空指针异常。</li><li><code>concat</code> 方法参数只能时字符串类型，拼接时不会创建 StringBuilder 对象，拼接完成后返回一个新的 String 对象。拼接 null 会出现空指针异常。</li><li><code>+</code> 使用较多。如果进行大量字符串拼接，这两个都不合适。</li></ul></li><li><p><code>String substring(int beginIndex);</code>: 从指定下标 beginIndex 开始截取子字符串</p></li><li><p><code>String substring(int beginIndex, int endIndex);</code></p></li><li><p><code>String trim();</code>: 去除字符串前后空白（只能去除 ASCII 码中的空格和制表符）</p></li><li><p><code>String strip();</code>: 去除字符串前后空白（支持所有的编码形式的空白，可以将全角空格去除，\\u3000 是全角空格，Java11 新增）</p></li><li><p><code>String stripLeading();</code> 去除前空白</p></li><li><p><code>String stripTrailing();</code> 去除后空白</p></li><li><p><code>String toString();</code> new String(original) 默认重写了 toString() 方法。</p></li><li><p><code>String intern();</code> 获取字符串常量池中的字符串，如果常量池中没有，则将字符串加入常量池并返回。</p></li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">97</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">98</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将字符串 &quot;abcd&quot; 放入字符串常量池并返回常量池中的字符串 &quot;abcd&quot;</span></span></code></pre></div><ul><li><code>static String join(CharSequence d, CharSequence... elements);</code> 将多个字符串以某个分隔符连接（Java8 新增）</li><li><code>static String join(CharSequence delimiter, Iterable&lt;? extends CharSequence&gt; elements);</code></li><li><code>static String valueOf(boolean b);</code> 以下所有的静态方法 valueOf 作用是将非字符串类型的数据转换为字符串形式。</li><li><code>static String valueOf(char c);</code></li><li><code>static String valueOf(char[] data);</code></li><li><code>static String valueOf(char[] data, int offset, int count);</code></li><li><code>static String valueOf(double d);</code></li><li><code>static String valueOf(float f);</code></li><li><code>static String valueOf(int i);</code></li><li><code>static String valueOf(long l);</code></li><li><code>static String valueOf(Object obj);</code></li></ul><h3 id="正则表达式初步" tabindex="-1">正则表达式初步 <a class="header-anchor" href="#正则表达式初步" aria-label="Permalink to &quot;正则表达式初步&quot;">​</a></h3><ol><li>正则表达式（regular expression），简称为 regex 或 regexp，是一种用于描述特定模式的表达式。它可以匹配、查找、替换文本中与该模式匹配的内容，被广泛应用于各种文本处理和匹配相关的应用中。</li><li>正则表达式的应用:</li></ol><ul><li>验证输入内容的格式是否正确。例如，邮箱，手机号，密码等</li><li>在文本编辑器中进行搜索和替换。例如，在代码编辑器中查找指定字符串或替换错误的代码成为正确的代码块</li><li>数据挖掘和信息提取。正则表达式可以从 HTML、XML、JSON 等格式的数据中提取所需的信息</li><li>用于编写脚本语言，如 awk，grep 和 sed</li><li>服务器端编程。正则表达式在处理数据和字符串时具有高效的性能，可以在开发 Web 应用程序时被广泛应用</li></ul><ol start="3"><li>正则表达式和 Java 语言的关系？ Java 语言中可以使用正则表达式。C 语言以及其它大部分编程语言都是支持正则表达式的。</li></ol><h3 id="正则表达式常见符号" tabindex="-1">正则表达式常见符号： <a class="header-anchor" href="#正则表达式常见符号" aria-label="Permalink to &quot;正则表达式常见符号：&quot;">​</a></h3><ol><li>元字符</li></ol><ul><li><code>.</code> 匹配除换行符以外的任意字符</li><li><code>\\w</code> 匹配字母或数字或下划线或汉字</li><li><code>\\s</code> 匹配任意的空白符</li><li><code>\\d</code> 匹配数字</li><li><code>\\b</code> 匹配单词的开始或结束</li><li><code>^</code> 匹配字符串的开始</li><li><code>$</code> 匹配字符串的结束</li></ul><ol start="2"><li>字符转义</li></ol><ul><li><code>\\.</code> 表示一个普通的.字符</li><li><code>\\*</code> 表示一个普通*字符</li></ul><ol start="3"><li>重复次数</li></ol><ul><li><code>*</code> 重复零次或更多次（0 - n）</li><li><code>+</code> 重复一次或更多次(1 - n)</li><li><code>?</code> 重复零次或一次 (0 或 1)</li><li><code>{n}</code> 重复 n 次 (n)</li><li><code>{n,}</code> 重复 n 次或更多次 ( &gt;= n)</li><li><code>{n,m}</code> 重复 n 到 m 次 (n - m)</li></ul><h3 id="正则表达式常见符号-1" tabindex="-1">正则表达式常见符号 <a class="header-anchor" href="#正则表达式常见符号-1" aria-label="Permalink to &quot;正则表达式常见符号&quot;">​</a></h3><ol><li>字符类</li></ol><ul><li><code>[abcdef]</code> 匹配 abcdef 这几个字符中的任意一个字符</li><li><code>[0-9]</code> 匹配 0-9 中的任意一个数字</li><li><code>[a-zA-Z0-9]</code> 匹配 a-z，A-Z，0-9 的任意一个字符</li><li><code>[.?!]</code> 匹配标点符号（.或?或!）</li><li><code>[abc-]</code> 匹配 abc-四个字符中的任意一个字符（注意-只能出现在末尾。如果-在中间则表示区间）</li></ul><ol start="2"><li>分支条件 <code>0\\d{2}-\\d{8}|0\\d{3}-\\d{7}</code>这个表达式能匹配两种以连字号分隔的电话号码： 一种是三位区号，8 位本地号(如 010-12345678)，一种是 4 位区号，7 位本地号(0376-2233445)</li><li>分组 <code>(\\d{1,3}.){3}\\d{1,3}</code> 是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\\d{1,3}匹配 1 到 3 位的数字， <code>(\\d{1,3}.){3}</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复 3 次，最后再加上一个一到三位的数字(\\d{1,3})</li><li>反义</li></ol><ul><li><code>\\W</code> 匹配任意不是字母，数字，下划线，汉字的字符</li><li><code>\\S</code> 匹配任意不是空白符的字符</li><li><code>\\D</code> 匹配任意非数字的字符</li><li><code>\\B</code> 匹配不是单词开头或结束的位置</li><li><code>[^x]</code> 匹配除了 x 以外的任意字符</li><li><code>[^aeiou]</code> 匹配除了 aeiou 这几个字母以外的任意字符</li></ul><h3 id="string-的正则表达式相关的方法" tabindex="-1">String 的正则表达式相关的方法 <a class="header-anchor" href="#string-的正则表达式相关的方法" aria-label="Permalink to &quot;String 的正则表达式相关的方法&quot;">​</a></h3><ul><li><code>String replace(CharSequence target, CharSequence replacement);</code> 将当前字符串中所有的 target 替换成 replacement，返回一个新的字符串。</li><li><code>String replaceAll(String regex, String replacement);</code> 将当前字符串中所有符合正则表达式的 regex 替换成 replacement。</li><li><code>String[] split(String regex);</code> 将当前字符串以某个正则表达式表示的子字符串进行分割，返回一个字符串数组。</li><li><code>boolean matches(String regex);</code> 判断当前字符串是否符合正则表达式 regex。</li></ul><h2 id="_6-2-stringbuffer-与-stringbuilder" tabindex="-1">6.2 StringBuffer 与 StringBuilder <a class="header-anchor" href="#_6-2-stringbuffer-与-stringbuilder" aria-label="Permalink to &quot;6.2 StringBuffer 与 StringBuilder&quot;">​</a></h2><h3 id="stringbuffer-和-stringbuilder-可变长度字符串" tabindex="-1">StringBuffer 和 StringBuilder：可变长度字符串 <a class="header-anchor" href="#stringbuffer-和-stringbuilder-可变长度字符串" aria-label="Permalink to &quot;StringBuffer 和 StringBuilder：可变长度字符串&quot;">​</a></h3><ol><li>这两个类是专门为频繁进行字符串拼接而准备。</li><li>StringBuffer 先出现的，Java5 的时候新增了 StringBuilder，StringBuffer 是线程安全的。在不需要考虑线程安全问题的情况下优先选择 StringBuilder，效率较高一些。</li><li>底层是 byte[] 数组，并且这个 byte[] 数组没有被 final 修饰，这说明如果 byte[] 数组满了，可以创建一个更大的新数组来达到扩容，然后它可以重新指向这个新的数组对象。</li><li>优化策略：创建 StringBuilder 对象时，预估计字符串的长度，给定一个合适的初始化容量，减少底层数组的扩容。</li><li>StringBuilder 默认初始化容量：16</li><li>StringBuilder 一次扩容多少？可以通过 Debug 跟踪一下 append 方法。扩容策略是：从当前容量开始，每次扩容为原来的 2 倍再加上 2。</li></ol><h3 id="stringbuffer-和-stringbuilder-构造方法" tabindex="-1">StringBuffer 和 StringBuilder 构造方法 <a class="header-anchor" href="#stringbuffer-和-stringbuilder-构造方法" aria-label="Permalink to &quot;StringBuffer 和 StringBuilder 构造方法&quot;">​</a></h3><ul><li><code>StringBuilder()</code>: 构造一个字符串生成器，其中不包含任何字符，初始容量为 16 个字符。</li><li><code>StringBuilder(int capacity)</code>: 构造一个字符串生成器，其中不包含任何字符，并且具有由容量参数指定的初始容量。</li><li><code>StringBuilder(String str)</code>: 构造初始化为指定字符串内容的字符串生成器。</li></ul><h3 id="stringbuffer-和-stringbuilder-常用方法" tabindex="-1">StringBuffer 和 StringBuilder 常用方法 <a class="header-anchor" href="#stringbuffer-和-stringbuilder-常用方法" aria-label="Permalink to &quot;StringBuffer 和 StringBuilder 常用方法&quot;">​</a></h3><ul><li><code>StringBuilder append(Type data);</code></li><li><code>StringBuilder delete(int start, int end);</code></li><li><code>StringBuilder deleteCharAt(int index);</code></li><li><code>StringBuilder insert(int offset, String str);</code></li><li><code>StringBuilder replace(int start, int end, String str);</code></li><li><code>StringBuilder reverse();</code></li><li><code>void setCharAt(int index, char ch);</code></li><li><code>void setLength(int newLength);</code></li><li><code>char charAt(int index);</code></li><li><code>int indexOf(String str);</code></li><li><code>int indexOf(String str, int fromIndex);</code></li><li><code>int lastIndexOf(String str);</code></li><li><code>int lastIndexOf(String str, int fromIndex);</code></li><li><code>int length();</code></li><li><code>String substring(int start);</code></li><li><code>String substring(int start, int end);</code></li><li><code>String toString();</code></li></ul><h3 id="string-的效率问题" tabindex="-1">String 的效率问题 <a class="header-anchor" href="#string-的效率问题" aria-label="Permalink to &quot;String 的效率问题&quot;">​</a></h3><p>以下这种写法尽量避免，效率太低：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> “”;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 优化策略：底层会新建一个StringBuilder对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 然后调用StringBuilder的append(i)方法进行追加</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 然后再调用StringBuilder toString()方法转成String类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 也就是说：这里会频繁的创建String对象，导致效率很低</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 同时给GC带来巨大压力。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因此建议使用下面的方式，只创建一个 StringBuilder 对象。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> begin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringBuilder s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">begin);</span></span></code></pre></div><p>String、StringBuilder、StringBuffer 效率 PK。</p><h2 id="_6-3-包装类" tabindex="-1">6.3 包装类 <a class="header-anchor" href="#_6-3-包装类" aria-label="Permalink to &quot;6.3 包装类&quot;">​</a></h2><h3 id="什么是包装类-有什么用" tabindex="-1">什么是包装类？有什么用？ <a class="header-anchor" href="#什么是包装类-有什么用" aria-label="Permalink to &quot;什么是包装类？有什么用？&quot;">​</a></h3><p>为了方便开发，Java 为 8 种基本数据类型分别又提供了对应的包装类。（包装类都是引用数据类型。）</p><table tabindex="0"><thead><tr><th>8 种基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.<strong>Integer</strong></td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>boolean</td><td>java.lang.Boolean</td></tr><tr><td>char</td><td>java.lang.<strong>Character</strong></td></tr></tbody></table><p>其中 Integer 使用最多，以它为代表进行学习。</p><p>包装类中的 6 个数字类型都继承了 Number 类：</p><p>Byte、Short、Integer、Long、Float、Double 都继承了 Number 类，因此这些类中都有以下这些方法：</p><ul><li><code>byteValue()</code></li><li><code>shortValue()</code></li><li><code>intValue()</code></li><li><code>longValue()</code></li><li><code>floatValue()</code></li><li><code>doubleValue()</code> 这些方法的作用就是将包装类型的数据转换为基本数据类型。包装类转换成基本数据类型的过程我们称为：拆箱(unboxing)。</li></ul><p>Boolean 的拆箱方法：<code>booleanValue()</code>; Character 的拆箱方法：<code>charValue()</code>;</p><h3 id="integer-的常量" tabindex="-1">Integer 的常量 <a class="header-anchor" href="#integer-的常量" aria-label="Permalink to &quot;Integer 的常量&quot;">​</a></h3><p>通过 Integer 提供的常量可以获取 int 的最大值和最小值：</p><ul><li>最大值：<code>Integer.MAX_VALUE</code></li><li>最小值：<code>Integer.MIN_VALUE</code></li></ul><p>当然，其它 5 个数字包装类也有对应的常量：</p><ul><li>byte 最大值：<code>Byte.MAX_VALUE</code></li><li>byte 最小值：<code>Byte.MIN_VALUE</code></li><li>short 最大值：<code>Short.MAX_VALUE</code></li><li>short 最小值：<code>Short.MIN_VALUE</code></li></ul><h3 id="integer-的构造方法" tabindex="-1">Integer 的构造方法 <a class="header-anchor" href="#integer-的构造方法" aria-label="Permalink to &quot;Integer 的构造方法&quot;">​</a></h3><ol><li><code>Integer(int value)</code></li></ol><ul><li>Java9 之后标记已过时，不建议使用。</li><li>该构造方法可以将基本数据类型转换成包装类。这个过程我们称为装箱 boxing</li></ul><ol start="2"><li><code>Integer(String s)</code></li></ol><ul><li>Java9 之后标记已过时，不建议使用。</li><li>该构造方法可以将字符串数字转换成包装类。但字符串必须是整数数字，如果不是会出现异常：NumberFormatException</li></ul><p>其它包装类的构造方法也是如此，例如 Boolean 的构造方法:</p><ul><li><code>Boolean(boolean value)</code></li><li><code>Boolean(String s)</code> 以上两个构造方法也都在 Java9 的时候标记已过时。</li></ul><h3 id="integer-的常用方法" tabindex="-1">Integer 的常用方法 <a class="header-anchor" href="#integer-的常用方法" aria-label="Permalink to &quot;Integer 的常用方法&quot;">​</a></h3><ul><li><code>static int compare(int x, int y)</code> 比较大小</li><li><code>static int max(int a, int b)</code> 最大值</li><li><code>static int min(int a, int b)</code> 最小值</li><li><code>static int parseInt(String s)</code> 将字符串数字转换成数字类型。其它包装类也有这个方法：Double.parseDouble(String s)</li><li><code>static String toBinaryString(int i)</code> 获取数字二进制的字符串表示形式</li><li><code>static String toHexString(int i)</code> 获取数字十六进制的字符串表示形式</li><li><code>static String toOctalString(int i)</code> 获取数字八进制的字符串表示形式</li><li><code>int compareTo(Integer anotherInteger)</code> 比较大小，可见实现了 Comparable 接口</li><li><code>boolean equals(Object obj)</code> 包装类已经重写了 equals() 方法。</li><li><code>String toString();</code> 包装类已经重写了 toString()方法。</li><li><code>int intValue()</code> 将包装类拆箱为基本数据类型</li><li><code>static String toString(int i)</code> 将基本数据类型转换成字符串</li><li><code>static Integer valueOf(int i)</code> 将基本数据类型转换成 Integer</li><li><code>static Integer valueOf(String s)</code> 将字符串转换成 Integer（这个字符串必须是数字字符串才行，不然出现 NumberFormatException）</li></ul><h3 id="三种类型之间的互相转换" tabindex="-1">三种类型之间的互相转换 <a class="header-anchor" href="#三种类型之间的互相转换" aria-label="Permalink to &quot;三种类型之间的互相转换&quot;">​</a></h3><p>String、int、Integer 三种类型之间的互相转换（String,double,Double 转换原理相同）: <img src="`+k+`" alt="alt text" loading="lazy"></p><p>注：Integer ——&gt; int: <code>Integer A = new Integer(5); int a = A.intValue();</code></p><h3 id="java5-新特性-自动装箱和自动拆箱" tabindex="-1">Java5 新特性：自动装箱和自动拆箱 <a class="header-anchor" href="#java5-新特性-自动装箱和自动拆箱" aria-label="Permalink to &quot;Java5 新特性：自动装箱和自动拆箱&quot;">​</a></h3><p>Java5 之后为了开发方便，引入了新特性：自动拆箱和自动装箱。</p><ul><li>自动装箱：auto boxing:</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 底层实际上的操作：Integer a = new Integer(10000);</span></span></code></pre></div><ul><li>自动拆箱：auto unboxing:</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 底层实际上的操作：int b = a.intValue();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的 a 也会做自动拆箱。</span></span></code></pre></div><p>注意空指针异常：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>以上代码出现空指针异常的原因是 a 在进行自动拆箱时，会调用 a.intValue()方法。 因为 a 是 null，访问实例方法会出现空指针异常，因此使用时应注意。</p><h3 id="整数型常量池" tabindex="-1">整数型常量池 <a class="header-anchor" href="#整数型常量池" aria-label="Permalink to &quot;整数型常量池&quot;">​</a></h3><ol><li>[-128 ~ 127] Java 为这个区间的 Integer 对象创建了<strong>整数型常量池</strong>。</li><li>也就是说如果整数没有超出范围的话，直接从整数型常量池获取 Integer 对象。</li></ol><p>以下是一个面试题：请说出它的输出结果：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h2 id="_6-4-大数字" tabindex="-1">6.4 大数字 <a class="header-anchor" href="#_6-4-大数字" aria-label="Permalink to &quot;6.4 大数字&quot;">​</a></h2><ol><li>如果整数超过 long 的最大值怎么办？ java 中提供了一种引用数据类型来解决这个问题：java.math.BigInteger。它的父类是 Number。</li></ol><p>常用构造方法：<code>BigInteger(String val)</code>。</p><p>常用方法：</p><ul><li><code>BigInteger add(BigInteger val)</code>: 求和</li><li><code>BigInteger subtract(BigInteger val)</code>: 相减</li><li><code>BigInteger multiply(BigInteger val)</code>: 乘积</li><li><code>BigInteger divide(BigInteger val)</code>: 商</li><li><code>int compareTo(BigInteger val)</code>: 比较</li><li><code>BigInteger abs()</code>: 绝对值</li><li><code>BigInteger max(BigInteger val)</code>: 最大值</li><li><code>BigInteger min(BigInteger val)</code>: 最小值</li><li><code>BigInteger pow(int exponent)</code>: 次幂</li><li><code>BigInteger sqrt()</code>: 平方根</li></ul><ol start="2"><li>如果浮点型数据超过 double 的最大值怎么办？ java 中提供了一种引用数据类型来解决这个问题：java.math.BigDecimal（经常用在财务软件中）。它的父类是 Number。</li></ol><p>构造方法：<code>BigDecimal(String val)</code>。</p><p>常用方法：</p><ul><li><code>BigDecimal add(BigDecimal augend)</code>: 求和</li><li><code>BigDecimal subtract(BigDecimal subtrahend)</code>: 相减</li><li><code>BigDecimal multiply(BigDecimal multiplicand)</code>: 乘积</li><li><code>BigDecimal divide(BigDecimal divisor)</code>: 商</li><li><code>BigDecimal max(BigDecimal val)</code>: 最大值</li><li><code>BigDecimal min(BigDecimal val)</code>: 最小值</li><li><code>BigDecimal movePointLeft(int n)</code>: 向左移动小数点</li><li><code>BigDecimal movePointRight(int n)</code>: 向右移动小数点</li></ul><ol start="3"><li>数字格式化 有时我们需要将数字以某种格式展示，在 java 中如何格式化呢？</li></ol><ul><li><code>java.text.DecimalFormat</code> 类是专门用来对数字进行格式的。</li><li>常用数字格式： <ul><li><code>###,###.##</code> // 三个数字为一组，组和组之间使用逗号隔开，保留两位小数</li><li><code>###,###.0000</code> // 三个数字为一组，组和组之间使用逗号隔开，保留 4 位小数，不够补 0</li></ul></li><li>构造方法：<code>DecimalFormat(String pattern)</code></li><li>常用方法：<code>String format(数字)</code></li></ul><h2 id="_6-5-日期处理" tabindex="-1">6.5 日期处理 <a class="header-anchor" href="#_6-5-日期处理" aria-label="Permalink to &quot;6.5 日期处理&quot;">​</a></h2><h3 id="日期相关-api" tabindex="-1">日期相关 API <a class="header-anchor" href="#日期相关-api" aria-label="Permalink to &quot;日期相关 API&quot;">​</a></h3><ol><li><code>long l = System.currentTimeMillis();</code> // 获取自 1970 年 1 月 1 日 0 时 0 分 0 秒到系统当前时间的总毫秒数。</li><li>java.util.Date 日期类 <ul><li>构造方法：Date()</li><li>构造方法：Date(long 毫秒)</li></ul></li><li>java.util.SimpleDateFormat 日期格式化类 <ul><li>日期转换成字符串（java.util.Date -&gt; java.lang.String）</li></ul></li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleDateFormat simpleDateFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleDateFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simpleDateFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2024-04-05 11:14:46 383</span></span></code></pre></div><ul><li>字符串转换成日期（java.lang.String -&gt; java.util.Date）</li></ul><ol start="4"><li>java.util.Calendar 日历类</li></ol><ul><li><p>获取当前时间的日历对象：Calendar c = Calendar.getInstance();</p></li><li><p>获取日历中的某部分：int year = c.get(Calendar.YEAR);</p><ul><li><code>Calendar.YEAR</code> 获取年份</li><li><code>Calendar.MONTH</code> 获取月份，0 表示 1 月，1 表示 2 月，...，11 表示 12 月</li><li><code>Calendar.DAY_OF_MONTH</code> 获取本月的第几天</li><li><code>Calendar.DAY_OF_YEAR</code> 获取本年的第几天</li><li><code>Calendar.HOUR_OF_DAY</code> 小时，24 小时制</li><li><code>Calendar.HOUR</code> 小时，12 小时制</li><li><code>Calendar.MINUTE</code> 获取分钟</li><li><code>Calendar.SECOND</code> 获取秒</li><li><code>Calendar.MILLISECOND</code> 获取毫秒</li><li><code>Calendar.DAY_OF_WEEK</code> 获取星期几，1 表示星期日，...，7 表示星期六</li></ul></li><li><p>java.util.Calendar 日历类:</p><ul><li><code>calendar.set(Calendar.YEAR, 2023)</code> 日历的 set 方法：设置日历</li><li><code>calendar.set(2008, Calendar.SEPTEMBER,8)</code> 日历的 set 方法：设置日历</li><li><code>calendar.add(Calendar.YEAR, 1)</code> 日历的 add 方法（日历中各个部分的加减）</li><li><code>calendar.setTime(new Date())</code> 日历对象的 setTime()让日历关联具体的时间</li><li><code>Date time = calendar.getTime()</code> 日历对象的 getTime()方法获取日历的具体时间</li></ul></li></ul><h2 id="_6-6-java8-的新日期-api" tabindex="-1">6.6 Java8 的新日期 API <a class="header-anchor" href="#_6-6-java8-的新日期-api" aria-label="Permalink to &quot;6.6 Java8 的新日期 API&quot;">​</a></h2><p>传统的日期 API 存在线程安全问题，Java8 又提供了一套全新的日期 API:</p><ul><li><code>java.time.LocalDate</code>、<code>java.time.LocalTime</code>、<code>java.time.LocalDateTime</code>: 日期、时间、日期时间</li><li><code>java.time.Instant</code>: 时间戳信息</li><li><code>java.time.Duration</code>: 计算两个时间对象之间的时间间隔，精度为纳秒</li><li><code>java.time.Period</code>: 计算两个日期之间的时间间隔，以年、月、日为单位</li><li><code>java.time.temporal.TemporalAdjusters</code>: 提供了一些方法用于方便的进行日期时间调整</li><li><code>java.time.format.DateTimeFormatter</code>: 用于进行日期时间格式化和解析</li></ul><h3 id="localdate-日期、localtime-时间、localdatetime-日期时间" tabindex="-1">LocalDate 日期、LocalTime 时间、LocalDateTime 日期时间 <a class="header-anchor" href="#localdate-日期、localtime-时间、localdatetime-日期时间" aria-label="Permalink to &quot;LocalDate 日期、LocalTime 时间、LocalDateTime 日期时间&quot;">​</a></h3><ol><li>获取当前时间（精确到纳秒，1 秒=1000 毫秒，1 毫秒=1000 微秒，1 微秒=1000 纳秒）</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ol start="2"><li>获取指定日期时间</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime ldt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2008</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取指定的日期时间</span></span></code></pre></div><ol start="3"><li>加日期和加时间</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime localDateTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ldt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusYears</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusMonths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="4"><li>减日期和减时间</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime localDateTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ldt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusYears</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusMonths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="5"><li>获取年月日时分秒</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 年</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> month </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 月</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dayOfMonth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDayOfMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个月的第几天</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dayOfWeek </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDayOfWeek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个周第几天</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dayOfYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDayOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一年的第几天</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMinute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSecond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nano </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNano</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 纳秒</span></span></code></pre></div><h3 id="instant-时间戳" tabindex="-1">Instant 时间戳 <a class="header-anchor" href="#instant-时间戳" aria-label="Permalink to &quot;Instant 时间戳&quot;">​</a></h3><p>Instant 时间戳——获取 1970 年 1 月 1 日 0 时 0 分 0 秒到某个时间的时间戳。</p><ol><li>获取系统当前时间（UTC：全球标准时间）</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Instant instant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ol start="2"><li>获取时间戳</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epochMilli </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEpochMilli</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="duration-计算时间间隔" tabindex="-1">Duration 计算时间间隔 <a class="header-anchor" href="#duration-计算时间间隔" aria-label="Permalink to &quot;Duration 计算时间间隔&quot;">​</a></h3><p>计算两个时间相差时间间隔:</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime now1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2008</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime now2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2009</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Duration between </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now1, now2);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 两个时间差多少个小时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(between.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 两个时间差多少天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(between.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="period-计算日期间隔" tabindex="-1">Period 计算日期间隔 <a class="header-anchor" href="#period-计算日期间隔" aria-label="Permalink to &quot;Period 计算日期间隔&quot;">​</a></h3><p>计算两个日期间隔:</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDate now1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2007</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDate now2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2008</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Period between </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Period.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now1, now2);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相差年数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(between.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getYears</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相差月数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(between.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMonths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相差天数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(between.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h4 id="temporaladjusters-时间矫正器" tabindex="-1">TemporalAdjusters 时间矫正器 <a class="header-anchor" href="#temporaladjusters-时间矫正器" aria-label="Permalink to &quot;TemporalAdjusters 时间矫正器&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取系统当前时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TemporalAdjusters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstDayOfMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前月的第一天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TemporalAdjusters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstDayOfNextYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下一年的第一天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TemporalAdjusters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastDayOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本年最后一天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TemporalAdjusters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastDayOfMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本月最后一天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TemporalAdjusters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DayOfWeek.MONDAY)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下周一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">......</span></span></code></pre></div><h3 id="datetimeformatter-日期格式化" tabindex="-1">DateTimeFormatter 日期格式化 <a class="header-anchor" href="#datetimeformatter-日期格式化" aria-label="Permalink to &quot;DateTimeFormatter 日期格式化&quot;">​</a></h3><ol><li>日期格式化 （LocalDateTime --&gt; String）</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DateTimeFormatter dtf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTimeFormatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dtf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now);</span></span></code></pre></div><ol><li>将字符串转换成日期（String --&gt; LocalDateTime）</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DateTimeFormatter dtf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTimeFormatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LocalDateTime localDateTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2008-08-08 08:08:08&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dtf);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localDateTime);</span></span></code></pre></div><h2 id="_6-7-math" tabindex="-1">6.7 Math <a class="header-anchor" href="#_6-7-math" aria-label="Permalink to &quot;6.7 Math&quot;">​</a></h2><p>java.lang.Math 数学工具类，都是静态方法。</p><ol><li><p>常用属性：<code>static final double PI</code>（圆周率）</p></li><li><p>常用方法：</p></li></ol><ul><li><code>static int abs(int a)</code> 绝对值</li><li><code>static double ceil(double a)</code> 向上取整</li><li><code>static double floor(double a)</code> 向下取整</li><li><code>static int max(int a, int b)</code> 最大值</li><li><code>static int min(int a, int b)</code> 最小值</li><li><code>static double random()</code> 随机数[0.0, 1.0)</li><li><code>int num = (int)(Math.random() * 100)</code> 可以获取[0-100)的随机数</li><li><code>static long round(double a)</code> 四舍五入</li><li><code>static double sqrt(double a)</code> 平方根</li><li><code>static double pow(double a, double b)</code> a 的 b 次幂</li></ul><h2 id="_6-8-枚举-java5-新特性" tabindex="-1">6.8 枚举（Java5 新特性） <a class="header-anchor" href="#_6-8-枚举-java5-新特性" aria-label="Permalink to &quot;6.8 枚举（Java5 新特性）&quot;">​</a></h2><h3 id="枚举的基本用法" tabindex="-1">枚举的基本用法 <a class="header-anchor" href="#枚举的基本用法" aria-label="Permalink to &quot;枚举的基本用法&quot;">​</a></h3><ol><li>枚举类型在 Java 中是一种引用数据类型。</li><li>合理使用枚举类型可以让代码更加清晰、可读性更高，可以有效地避免一些常见的错误。</li><li>什么情况下考虑使用枚举类型？</li></ol><ul><li>这个数据是有限的，并且可以一枚一枚列举出来的。</li><li>枚举类型是类型安全的，它可以有效地防止使用错误的类型进行赋值。</li></ul><ol start="4"><li>枚举如何定义？以下是最基本的格式：</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 枚举类型名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    枚举值1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">枚举值2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">枚举值3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">枚举值4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="5"><li>通过反编译(javap)可以看到：</li></ol><ul><li>所有枚举类型默认继承 java.lang.Enum,因此枚举类型无法继承其他类。</li><li>所有的枚举类型都被 final 修饰，所以枚举类型是无法继承的</li><li>所有的枚举值都是常量</li><li>所有的枚举类型中都有一个 values 数组（可以通过 values()获取所有枚举值并遍历）</li></ul><h3 id="枚举的高级用法" tabindex="-1">枚举的高级用法 <a class="header-anchor" href="#枚举的高级用法" aria-label="Permalink to &quot;枚举的高级用法&quot;">​</a></h3><ol><li>普通类中可以编写的元素，枚举类型中也可以编写。</li></ol><ul><li>静态代码块，构造代码块</li><li>实例方法，静态方法</li><li>实例变量，静态变量</li></ul><ol start="2"><li>枚举类中的构造方法是私有化的（默认就是私有化的，只能在本类中调用）</li></ol><ul><li>构造方法调用时不能用 new。直接使用“枚举值(实参);”调用。</li><li>每一个枚举值相当于枚举类型的实例。</li></ul><ol start="3"><li>枚举类型中如果编写了其他代码，必须要有枚举值，枚举值的定义要放到最上面， 最后一个枚举值的分号不能省略。</li><li>枚举类因为默认继承了 java.lang.Enum，因此不能再继承其他类，但可以实现接口。</li></ol><ul><li>第一种实现方式：在枚举类中实现。</li><li>第二种实现方式：让每一个枚举值实现接口。</li></ul><h2 id="_6-9-random" tabindex="-1">6.9 Random <a class="header-anchor" href="#_6-9-random" aria-label="Permalink to &quot;6.9 Random&quot;">​</a></h2><p><code>java.util.Random</code>: 随机数生成器（生成随机数的工具类）。</p><p>常用构造方法：<code>Random()</code></p><p>常用方法：</p><ul><li><code>int nextInt()</code>: 获取一个 int 类型取值范围内的随机 int 数</li><li><code>int nextInt(int bound)</code>: 获取[0,bound)区间的随机数</li><li><code>double nextDouble()</code>: 获取[0.0, 1.0)的随机数。</li></ul><h2 id="_6-10-system" tabindex="-1">6.10 System <a class="header-anchor" href="#_6-10-system" aria-label="Permalink to &quot;6.10 System&quot;">​</a></h2><p>java.lang.System 类的常用方法：</p><ol><li>常用属性：</li></ol><ul><li><code>static final PrintStream err</code> 标准错误输出流（System.err.println(“错误信息”);输出红色字体）</li><li><code>static final InputStream in</code> 标准输入流</li><li><code>static final PrintStream out</code> 标准输出流</li></ul><ol start="2"><li>常用方法：</li></ol><ul><li><code>static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code> 数组拷贝</li><li><code>static void exit(int status)</code> 退出虚拟机</li><li><code>static void gc()</code> 建议启动垃圾回收器</li><li><code>static long currentTimeMillis()</code> 获取自 1970-01-01 00:00:00 000 到系统当前时间的总毫秒数</li><li><code>static long nanoTime()</code> 获取自 1970 年 1 月 1 日 0 时 0 分 0 秒以来，当前时间的纳秒数</li><li><code>static Map&lt;String,String&gt; getenv()</code> 获取当前系统的环境变量，例如 Path，JAVA_HOME，CLASSPATH 等。</li><li><code>static Properties getProperties()</code> 获取当前系统的属性。</li><li><code>static String getProperty(String key)</code> 通过 key 获取指定的系统属性。</li></ul><h2 id="_6-11-uuid" tabindex="-1">6.11 UUID <a class="header-anchor" href="#_6-11-uuid" aria-label="Permalink to &quot;6.11 UUID&quot;">​</a></h2><p>UUID（通用唯一标识符）是一种软件构建的标准，用来生成具有唯一性的 ID。</p><p>UUID 具有以下特点：</p><ol><li>UUID 可以在分布式系统中生成唯一的标识符，避免因为主键冲突等问题带来的麻烦。</li><li>UUID 具有足够的唯一性，重复的概率相当低。UUID 使用的是 128 位数字，除了传统的 16 进制表示之外（32 位的 16 进制表示），还有基于 62 进制的表示，可以更加简洁紧凑。</li><li>UUID 生成时不需要依赖任何中央控制器或数据库服务器，可以在本地方便、快速地生成唯一标识符。</li><li>UUID 生成后可以被许多编程语言支持并方便地转化为字符串表示形式，适用于多种应用场景。</li></ol><p>在 Java 开发中，UUID 的使用是非常普遍的。它可以用于生成数据表主键、场景标识、链路追踪、缓存 Key 等。使用 UUID 可以方便地避免主键、缓存 Key 等因冲突而产生的问题，同时能够实现多种功能，例如追踪、缓存、日志记录等。</p><p>Java 中的 java.util.UUID 类提供对 UUID 的支持:</p><ul><li>生成 UUID：<code>static UUID randomUUID()</code></li><li>将 UUID 转换为字符串：<code>String toString()</code></li></ul>`,185);function r(o,E,g,c,y,u){const a=s("a-back-top"),l=s("reading-progress-bar");return h(),n("div",null,[d,i(a),i(l)])}const m=t(p,[["render",r]]);export{b as __pageData,m as default};
