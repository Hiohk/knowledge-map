import{$ as t,U as l,c as s,aA as e,ab as i,S as h}from"./chunks/framework.BDLhZlrp.js";const u=JSON.parse('{"title":"11. 注解","description":"","frontmatter":{"prev":{"text":"反射机制","link":"/backend/java/java10"},"next":{"text":"网络编程","link":"/backend/java/java12"}},"headers":[],"relativePath":"backend/java/java11.md","filePath":"backend/java/java11.md","lastUpdated":1717049326000}'),p={name:"backend/java/java11.md"},k=e(`<h1 id="_11-注解" tabindex="-1">11. 注解 <a class="header-anchor" href="#_11-注解" aria-label="Permalink to &quot;11. 注解&quot;">​</a></h1><h2 id="_11-1-注解概述" tabindex="-1">11.1 注解概述 ⭐ <a class="header-anchor" href="#_11-1-注解概述" aria-label="Permalink to &quot;11.1 注解概述 :star:&quot;">​</a></h2><ol><li>什么是注解？</li></ol><ul><li>注解是 JDK 1.5 才引入的</li><li>注解可以标注在类，属性，方法等上面</li><li>注解可以做到在不改变代码逻辑的前提下在代码中嵌入补充信息</li></ul><ol start="2"><li>注解与注释</li></ol><ul><li>注释：给程序员看的，编译器编译时会忽略注释。</li><li>注解：给编译器看的，或给其它程序看的，程序根据有没有这个注解来决定不同的处理方式。</li></ul><ol start="3"><li>注解的重要性</li></ol><p>框架是如何实现的：框架 = 反射 + 注解 + 设计模式。</p><h2 id="_11-2-java-预置注解" tabindex="-1">11.2 Java 预置注解 <a class="header-anchor" href="#_11-2-java-预置注解" aria-label="Permalink to &quot;11.2 Java 预置注解&quot;">​</a></h2><p>JDK 内置的注解</p><ol><li><code>@Deprecated</code> 用来标记过时的元素，在编译阶段遇到这个注解时会发出提醒警告，告诉开发者正在调用一个过时的元素比如过时的类、过时的方法、过时的属性等。</li><li><code>@Override</code> 修饰实例方法，则该方法必须是个重写方法，否则就会编译失败。</li><li><code>@SuppressWarnings</code>（抑制警告的注解）：在实际开发中，建议尽量不要忽略警告，而是真正的去解决警告。</li></ol><ul><li><code>@SuppressWarnings(&quot;rawtypes&quot;)</code>：抑制未使用泛型的警告</li><li><code>@SuppressWarnings(&quot;resource&quot;)</code>：抑制未关闭资源的警告</li><li><code>@SuppressWarnings(&quot;deprecation&quot;)</code>：抑制使用了已过时资源时的警告</li><li><code>@SuppressWarnings(&quot;all&quot;)</code>：抑制所有警告</li></ul><ol start="4"><li><code>@FunctionalInterface</code> “函数式接口”的注解，这个是 JDK 1.8 版本引入的新特性。使用 @FunctionalInterface 标注的接口，则该接口就有且只能存在一个抽象方法，否则就会发生编译错误。（注意：接口中的默认方法或静态方法可以有多个。）</li></ol><h2 id="_11-3-自定义注解" tabindex="-1">11.3 自定义注解 <a class="header-anchor" href="#_11-3-自定义注解" aria-label="Permalink to &quot;11.3 自定义注解&quot;">​</a></h2><h3 id="自定义注解" tabindex="-1">自定义注解 <a class="header-anchor" href="#自定义注解" aria-label="Permalink to &quot;自定义注解&quot;">​</a></h3><ul><li>使用 @interface 来定义注解。</li><li>默认情况下注解可以出现在类上、方法上、属性上、构造方法上、方法参数上等......</li><li>所有自定义的注解，它的父类是：<code>java.lang.annotation.Annotation</code></li></ul><h3 id="注解也可以定义属性" tabindex="-1">注解也可以定义属性 <a class="header-anchor" href="#注解也可以定义属性" aria-label="Permalink to &quot;注解也可以定义属性&quot;">​</a></h3><ul><li><p>注解也可以定义属性，不过属性定义时，属性名后面必须加一个小括号。</p></li><li><p>属性的类型只能是：</p><p>(1) byte，short，int，long，float，double，boolean，char</p><p>(2) String、Class、枚举类型、注解类型</p><p>(3) 以上所有类型的一维数组形式</p></li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DataBaseInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.mysql.jdbc.Driver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    short</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Class </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.class;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Season </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">season</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Season.SPRING;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MyAnnotation </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="注解的使用" tabindex="-1">注解的使用 <a class="header-anchor" href="#注解的使用" aria-label="Permalink to &quot;注解的使用&quot;">​</a></h3><ul><li>注解在使用时必须给属性赋值，除非你使用了 default 关键字为属性指定了默认值。</li><li>如果属性只有一个，并且属性名是 value 时，使用注解时 value 可以省略不写。</li><li>如果属性是一个数组，使用注解时，数组值只有一个，数组的大括号可以省略。</li></ul><h2 id="_11-4-元注解" tabindex="-1">11.4 元注解 <a class="header-anchor" href="#_11-4-元注解" aria-label="Permalink to &quot;11.4 元注解&quot;">​</a></h2><h3 id="元注解简介" tabindex="-1">元注解简介 <a class="header-anchor" href="#元注解简介" aria-label="Permalink to &quot;元注解简介&quot;">​</a></h3><ol><li>用来标注注解的注解叫做元注解。(也是 JDK 内置的注解。)</li><li>常用的元注解：</li></ol><ul><li><code>@Retention</code>：设置注解的保持性</li><li><code>@Target</code>：设置注解可以出现的位置</li><li><code>@Documented</code>：设置注解是否可以生成到帮助文档中</li><li><code>@Inherited</code>：设置注解是否支持继承</li><li><code>@Repeatable</code>：设置注解在某一个元素上是否可以重复使用（Java8 的新特性。）</li></ul><h3 id="retention" tabindex="-1">@Retention <a class="header-anchor" href="#retention" aria-label="Permalink to &quot;@Retention&quot;">​</a></h3><ol><li>Retention 英文意思有保留、保持的意思，它表示注解存在阶段是保留在源代码（编译期），字节码（类加载）或者运行时（JVM 中运行）。</li><li>在 @Retention 注解中使用枚举 RetentionPolicy 来表示注解保留时期。</li></ol><ul><li><code>@Retention(RetentionPolicy.SOURCE)</code>：注解仅存在于源代码中，在字节码文件中不包含。</li><li><code>@Retention(RetentionPolicy.CLASS)</code>：注解在字节码文件中存在，但运行时无法获得（默认）。</li><li><code>@Retention(RetentionPolicy.RUNTIME)</code>：注解在字节码文件中存在，且运行时可通过反射获取。</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-BlERt" id="tab-pbkqY77" checked><label for="tab-pbkqY77">AnnotationTest.class</label><input type="radio" name="group-BlERt" id="tab--VggR4i"><label for="tab--VggR4i">MyAnnotation.class</label></div><div class="blocks"><div class="language-Java vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyAnnotation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnnotationTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AnnotationTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; testClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AnnotationTest.class;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MyAnnotation annotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyAnnotation.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MyAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h3 id="target" tabindex="-1">@Target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;@Target&quot;">​</a></h3><p>用于描述注解可以使用的位置，该注解使用 ElementType 枚举类型用于描述注解可以出现的位置， ElementType 有如下枚举值：</p><ul><li><code>@Target(ElementType.TYPE)</code>：作用于接口、类、枚举、注解</li><li><code>@Target(ElementType.FIELD)</code>：作用于属性、枚举的常量</li><li><code>@Target(ElementType.METHOD)</code>：作用于方法</li><li><code>@Target(ElementType.PARAMETER)</code>：作用于方法参数</li><li><code>@Target(ElementType.CONSTRUCTOR)</code>：作用于构造方法</li><li><code>@Target(ElementType.LOCAL_VARIABLE)</code>：作用于局部变量</li><li><code>@Target(ElementType.ANNOTATION_TYPE)</code>：作用于注解</li><li><code>@Target(ElementType.PACKAGE)</code>：作用于包</li><li><code>@Target(ElementType.TYPE_PARAMETER)</code>：作用于泛型，即泛型方法、泛型类和泛型接口。</li><li><code>@Target(ElementType.TYPE_USE)</code>：作用于任意类型。</li></ul><h3 id="documented" tabindex="-1">@Documented <a class="header-anchor" href="#documented" aria-label="Permalink to &quot;@Documented&quot;">​</a></h3><p>Documented 的英文意思是文档。使用 javadoc.exe 工具可以从程序源代码中抽取类、方法、属性等注释形成一个源代码配套的 API 帮助文档，而该工具抽取时默认不包括注释内容。如果使用的注解被@Documented 标注，那么该注解就能被 javadoc.exe 工具提取到 API 文档。</p><h3 id="inherited" tabindex="-1">@Inherited <a class="header-anchor" href="#inherited" aria-label="Permalink to &quot;@Inherited&quot;">​</a></h3><p>Inherited 的英文意思是继承，但是这个继承和我们平时理解的继承大同小异，一个被@Inherited 注解了的注解修饰了一个父类，则它的子类也继承了父类的注解。</p><h3 id="repeatable" tabindex="-1">@Repeatable <a class="header-anchor" href="#repeatable" aria-label="Permalink to &quot;@Repeatable&quot;">​</a></h3><p>Repeatable 表示可重复的含义，该注解属于 JDK1.8 版本的新特性。</p><p>要使用 @Repeatable，你需要做以下几步：</p><p>定义一个容器注解，用于存储重复的注解。这个容器注解需要有一个名为 value 的元素，且该元素的类型是一个包含要重复的注解的数组。 在你想要重复的注解上使用 @Repeatable 元注解，并指定容器注解作为参数。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 容器注解</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MyAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要重复的注解</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MyAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用@Repeatable指定容器注解</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Annotations.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MyRepeatableAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyRepeatableAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyRepeatableAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        MyRepeatableAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] annotations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotationsByType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyRepeatableAnnotation.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Annotations found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> annotations.length);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Annotations container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Annotations.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Container annotations found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_11-5-反射注解" tabindex="-1">11.5 反射注解 <a class="header-anchor" href="#_11-5-反射注解" aria-label="Permalink to &quot;11.5 反射注解&quot;">​</a></h2><ol><li>获取类上的所有注解</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Annotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] annotations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ol start="2"><li>获取类上指定的某个注解</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAnnotationPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTest01.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AnnotationTest01 an </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTest01.class);</span></span></code></pre></div><ol start="3"><li>获取属性上的所有注解</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Annotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] annotations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ol start="4"><li>获取属性上指定的某个注解</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">field.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAnnotationPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTest02.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AnnotationTest02 an </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTest02.class);</span></span></code></pre></div><ol start="5"><li>获取方法上的所有注解</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Annotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] annotations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ol start="6"><li>获取方法上指定的某个注解</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAnnotationPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTest02.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AnnotationTest02 an </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTest02.class);</span></span></code></pre></div>`,54);function E(d,r,o,g,c,y){const a=i("a-back-top"),n=i("reading-progress-bar");return h(),l("div",null,[k,s(a),s(n)])}const A=t(p,[["render",E]]);export{u as __pageData,A as default};
