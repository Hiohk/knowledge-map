import{$ as h,U as n,c as s,aA as t,ab as i,S as e}from"./chunks/framework.BDLhZlrp.js";const p="/knowledge-map/assets/image40.Dm4WjhfZ.png",k="/knowledge-map/assets/image41.DAMjWfBA.png",F="/knowledge-map/assets/image42.B9u5c9VV.png",d="/knowledge-map/assets/image43.CDi0tRbt.png",m=JSON.parse('{"title":"第 05 章 排序与分页","description":"","frontmatter":{"prev":{"text":"运算符","link":"/backend/mysql/basic04"},"next":{"text":"多表查询","link":"/backend/mysql/basic06"}},"headers":[],"relativePath":"backend/mysql/basic05.md","filePath":"backend/mysql/basic05.md","lastUpdated":1718259420000}'),r={name:"backend/mysql/basic05.md"},g=t(`<h1 id="第-05-章-排序与分页" tabindex="-1">第 05 章 排序与分页 <a class="header-anchor" href="#第-05-章-排序与分页" aria-label="Permalink to &quot;第 05 章 排序与分页&quot;">​</a></h1><h2 id="_1-排序数据" tabindex="-1">1. 排序数据 <a class="header-anchor" href="#_1-排序数据" aria-label="Permalink to &quot;1. 排序数据&quot;">​</a></h2><h3 id="_1-1-排序规则" tabindex="-1">1.1 排序规则 <a class="header-anchor" href="#_1-1-排序规则" aria-label="Permalink to &quot;1.1 排序规则&quot;">​</a></h3><ul><li>使用 ORDER BY 子句排序 <ul><li>ASC（ascend）: 升序</li><li>DESC（descend）:降序</li></ul></li><li><strong>ORDER BY 子句在 SELECT 语句的结尾</strong>。</li></ul><h3 id="_1-2-单列排序" tabindex="-1">1.2 单列排序 <a class="header-anchor" href="#_1-2-单列排序" aria-label="Permalink to &quot;1.2 单列排序&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_name, job_id, department_id, hire_date</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hire_date ;</span></span></code></pre></div><p><img src="`+p+`" alt="alt text" loading="lazy"></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last_name,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> job_id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> department_id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hire_date</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> employees</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hire_date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span></code></pre></div><p><img src="`+k+`" alt="alt text" loading="lazy"></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> employee_id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last_name,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> salary</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annsal</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> employees</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annsal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+F+`" alt="alt text" loading="lazy"></p><h3 id="_1-3-多列排序" tabindex="-1">1.3 多列排序 <a class="header-anchor" href="#_1-3-多列排序" aria-label="Permalink to &quot;1.3 多列排序&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last_name,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> department_id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> salary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> employees</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> department_id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> salary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+d+`" alt="alt text" loading="lazy"></p><ul><li>可以使用不在 SELECT 列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><h2 id="_2-分页" tabindex="-1">2. 分页 <a class="header-anchor" href="#_2-分页" aria-label="Permalink to &quot;2. 分页&quot;">​</a></h2><h3 id="_2-1-背景" tabindex="-1">2.1 背景 <a class="header-anchor" href="#_2-1-背景" aria-label="Permalink to &quot;2.1 背景&quot;">​</a></h3><p>背景 1：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景 2：表里有 4 条数据，我们只想要显示第 2、3 条数据怎么办呢？</p><h3 id="_2-2-实现规则" tabindex="-1">2.2 实现规则 <a class="header-anchor" href="#_2-2-实现规则" aria-label="Permalink to &quot;2.2 实现规则&quot;">​</a></h3><ul><li>分页原理：所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</li><li>MySQL 中使用 LIMIT 实现分页</li><li>格式：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [位置偏移量,] 行数</span></span></code></pre></div><p>第一个“位置偏移量”参数指示 MySQL 从哪一行开始显示，是一个可选参数，如果不指定“位置偏移 量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0，第二条记录的位置偏移量是 1，以此类推）；第二个参数“行数”指示返回的记录条数。</p><ul><li>举例</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--前10条记录：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LIMIT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--第11至20条记录：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LIMIT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10,10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--第21至30条记录：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LIMIT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20,10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>MySQL 8.0 中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第 5 条记录开始后面的 3 条记录，和“LIMIT4,3;”返回的结果相同。</p></blockquote><ul><li>分页显式公式：（当前页数-1）*每页条数，每页条数</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> table</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LIMIT(PageNo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PageSize,PageSize;</span></span></code></pre></div><ul><li>注意：LIMIT 子句必须放在整个 SELECT 语句的最后！</li><li>使用 LIMIT 的好处</li></ul><p>约束返回结果的数量可以 减少数据表的网络传输量 ，也可以 提升查询效率 。如果我们知道返回结果只有 1 条，就可以使用 LIMIT 1 ，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需 要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p><h3 id="_2-3-拓展" tabindex="-1">2.3 拓展 <a class="header-anchor" href="#_2-3-拓展" aria-label="Permalink to &quot;2.3 拓展&quot;">​</a></h3><p>在不同的 DBMS 中使用的关键字可能不同。在 MySQL、PostgreSQL、MariaDB 和 SQLite 中使用 LIMIT 关键字，而且需要放到 SELECT 语句的最后面。</p><ul><li>如果是 SQL Server 和 Access，需要使用 TOP 关键字，比如：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TOP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hp_max</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hp_max</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESC</span></span></code></pre></div><ul><li>如果是 DB2，使用 FETCH FIRST 5 ROWS ONLY 这样的关键字：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hp_max</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hp_max</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FETCH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FIRST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ROWS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ONLY</span></span></code></pre></div><ul><li>如果是 Oracle，你需要基于 ROWNUM 来统计行数：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rownum,last_name,salary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> employees</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rownum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> salary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>需要说明的是，这条语句是先取出来前 5 条数据行，然后再按照 hp_max 从高到低的顺序进行排序。但这样产生的结果和上述方法的并不一样。我会在后面讲到子查询，你可以使用:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rownum,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last_name,salary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last_name,salary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> employees</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORDER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> salary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rownum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>得到与上述方法一致的结果。</p>`,41);function E(o,y,c,C,B,u){const a=i("a-back-top"),l=i("reading-progress-bar");return e(),n("div",null,[g,s(a),s(l)])}const _=h(r,[["render",E]]);export{m as __pageData,_ as default};
