import{$ as e,U as p,c as s,aA as l,ab as i,S as t}from"./chunks/framework.BDLhZlrp.js";const A=JSON.parse('{"title":"4. EL 表达式","description":"","frontmatter":{"prev":{"text":"JSP","link":"/backend/javaweb/javaweb03"},"next":{"text":"JSTL 标签库","link":"/backend/javaweb/javaweb05"}},"headers":[],"relativePath":"backend/javaweb/javaweb04.md","filePath":"backend/javaweb/javaweb04.md","lastUpdated":1717049326000}'),h={name:"backend/javaweb/javaweb04.md"},k=l(`<h1 id="_4-el-表达式" tabindex="-1">4. EL 表达式 <a class="header-anchor" href="#_4-el-表达式" aria-label="Permalink to &quot;4. EL 表达式&quot;">​</a></h1><h2 id="_4-1-el-表达式简介" tabindex="-1">4.1 EL 表达式简介 <a class="header-anchor" href="#_4-1-el-表达式简介" aria-label="Permalink to &quot;4.1 EL 表达式简介&quot;">​</a></h2><ul><li>Expression Language（表达式语言）</li><li>EL 表达式可以代替 JSP 中的 java 代码，让 JSP 文件中的程序看起来更加整洁，美观。</li><li>JSP 中夹杂着各种 java 代码，例如&lt;% java 代码 %&gt;、&lt;%=%&gt;等，导致 JSP 文件很混乱，不好看，不好维护，所以才有了后期的 EL 表达式。</li><li>EL 表达式可以算是 JSP 语法的一部分。EL 表达式归属于 JSP。</li></ul><h2 id="_4-2-el-表达式作用" tabindex="-1">4.2 EL 表达式作用 <a class="header-anchor" href="#_4-2-el-表达式作用" aria-label="Permalink to &quot;4.2 EL 表达式作用&quot;">​</a></h2><p>EL 表达式出现在 JSP 中的作用主要是： 从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是 EL 表达式的作用：</p><ul><li><p>从某个域中取数据。</p><p>四个域：</p><p>○ pageContext</p><p>○ request</p><p>○ session</p><p>○ application</p></li><li><p>将取出的数据转成字符串。</p><p>● 如果是一个 java 对象，也会自动调用 java 对象的 toString 方法将其转换成字符串。</p></li><li><p>将字符串输出到浏览器。</p><p>● 和这个一样：&lt;%= %&gt;，将其输出到浏览器。</p></li></ul><p>EL 表达式很好用，基本的语法格式： <code>\${表达式}</code></p><h2 id="_4-3-el-表达式的使用" tabindex="-1">4.3 EL 表达式的使用 <a class="header-anchor" href="#_4-3-el-表达式的使用" aria-label="Permalink to &quot;4.3 EL 表达式的使用&quot;">​</a></h2><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 创建User对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jackson&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 数据是必须存储到四大范围之一的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userObj&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">使用EL表达式取</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${这个位置写什么？？这里写的一定是存储到域对象当中时的name}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要这样写：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${userObj}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于java代码：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userObj&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不要这样写：\${&quot;userObj&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 面试题：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \${abc} 和 \${&quot;abc&quot;}的区别是什么？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \${abc}表示从某个域中取出数据，并且被取的这个数据的name是&quot;abc&quot;，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前一定有这样的代码: 域.setAttribute(&quot;abc&quot;, 对象);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \${&quot;abc&quot;} 表示直接将&quot;abc&quot;当做普通字符串输出到浏览器。不会从某个域中取数据了。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \${userObj} 底层是怎么做的？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;%--如果想输出对象的属性值，怎么办？--%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${userObj.username} 使用这个语法的前提是：</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User对象有getUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()方法。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${userObj.password} 使用这个语法的前提是：</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User对象有getPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()方法。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${userObj.age} 使用这个语法的前提是：</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User对象有getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()方法。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${userObj.email} 使用这个语法的前提是：</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User对象有getEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()方法。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：如果没有对应的get方法，则出现异常。报500错误。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${userObj.addr222.zipcode}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以上EL表达式对应的java代码：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAddr222</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getZipcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ol><li><p>EL 表达式优先从小范围中读取数据:</p><p>pageContext &lt; request &lt; session &lt; application</p></li><li><p>EL 表达式中有四个隐含的隐式的范围：</p><ul><li><p>pageScope 对应的是 pageContext 范围</p></li><li><p>requestScope 对应的是 request 范围</p></li><li><p>sessionScope 对应的是 session 范围</p></li><li><p>applicationScope 对应的是 application 范围</p></li><li><p>EL 表达式对 null 进行了预处理。如果是 null，则向浏览器输出一个空字符串。</p></li><li><p>EL 表达式取数据的时候有两种形式：</p><p>第一种：<code>.</code> （大部分使用这种方式）</p><p>第二种：<code>[ ]</code>（如果存储到域的时候，这个 name 中含有特殊字符，可以使用 <code>[ ]</code>）</p><p>1）<code>request.setAttribute(&quot;abc.def&quot;, &quot;zhangsan&quot;)</code>;</p><p>2）<code>\${requestScope.abc.def}</code> 这样是无法取值的。</p><p>3）应该这样：<code>\${requestScope[&quot;abc.def&quot;]}</code></p></li></ul></li><li><p>掌握使用 EL 表达式，怎么从 Map 集合中取数据：</p><ul><li><code>\${map.key}</code></li></ul></li><li><p>掌握使用 EL 表达式，怎么从数组和 List 集合中取数据：</p><ul><li><code>\${数组[0]}</code></li><li><code>\${数组[1]}</code></li><li><code>\${list[0]}</code></li></ul></li><li><p>page 指令当中，有一个属性，可以忽略 EL 表达式</p></li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isELIgnored</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// isELIgnored=&quot;true&quot; 表示忽略EL表达式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// isELIgnored=&quot;false&quot; 表示不忽略EL表达式。（这是默认值）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// isELIgnored=&quot;true&quot; 这个是全局的控制。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以使用反斜杠进行局部控制：\\\${username} 这样也可以忽略EL表达式。</span></span></code></pre></div><ol start="6"><li><p>通过 EL 表达式获取应用的根：</p><ul><li><code>\${pageContext.request.contextPath}</code></li></ul></li><li><p>EL 表达式中其他的隐式对象：</p><ul><li>pageContext</li><li>param</li><li>paramValues</li><li>initParam</li></ul></li><li><p>EL 表达式的运算符</p><ul><li><p>算术运算符</p><p><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></p></li><li><p>关系运算符</p><p><code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>eq</code></p></li><li><p>逻辑运算符</p><p><code>!</code>、<code>&amp;&amp;</code>、<code>||</code></p></li><li><p>条件运算符</p><p><code>? :</code></p></li><li><p>取值运算符</p><p><code>[ ]</code> 和 <code>.</code></p></li><li><p>empty 运算符</p><p>empty 运算符的结果是 boolean 类型</p><p><code>\${empty param.username}</code></p><p><code>\${not empty param.username}</code></p><p><code>\${!empty param.password}</code></p></li></ul></li></ol>`,12);function d(r,o,c,E,g,u){const a=i("a-back-top"),n=i("reading-progress-bar");return t(),p("div",null,[k,s(a),s(n)])}const b=e(h,[["render",d]]);export{A as __pageData,b as default};
