import{$ as d,U as a,a4 as i,G as t,c as e,aA as s,ab as n,S as l}from"./chunks/framework.BDLhZlrp.js";const o="/knowledge-map/assets/image-1.BmkQVyPh.png",k="/knowledge-map/assets/image-2.CRg2CDFA.png",r="/knowledge-map/assets/image-3.CeyNn4Qp.png",ji=JSON.parse('{"title":"2. Java 基础语法","description":"","frontmatter":{"prev":{"text":"先导知识","link":"/backend/java/java01"},"next":{"text":"类和对象","link":"/backend/java/java03"}},"headers":[],"relativePath":"backend/java/java02.md","filePath":"backend/java/java02.md","lastUpdated":1719481890000}'),c={name:"backend/java/java02.md"},g=s(`<h1 id="_2-java-基础语法" tabindex="-1">2. Java 基础语法 <a class="header-anchor" href="#_2-java-基础语法" aria-label="Permalink to &quot;2. Java 基础语法&quot;">​</a></h1><h2 id="_2-1-标识符" tabindex="-1">2.1 标识符 ✅ <a class="header-anchor" href="#_2-1-标识符" aria-label="Permalink to &quot;2.1 标识符 :white_check_mark:&quot;">​</a></h2><h3 id="什么是标识符" tabindex="-1">什么是标识符 <a class="header-anchor" href="#什么是标识符" aria-label="Permalink to &quot;什么是标识符&quot;">​</a></h3><ol><li>在 Java 中，标识符是用来给变量、方法、类和包等命名的字符序列。</li><li>标识符的长度没有限制，但是建议使用有意义的、简洁的标识符，以提高代码的可读性和可维护性。</li></ol><blockquote><p>标识符标识符可以标识什么?</p><ol><li><p>变量名</p></li><li><p>方法名</p></li><li><p>类名、接口名、枚举名、注解名</p></li><li><p>包名</p></li><li><p>常量名</p></li></ol><p>......</p></blockquote><h3 id="标识符命名规则" tabindex="-1">标识符命名规则 <a class="header-anchor" href="#标识符命名规则" aria-label="Permalink to &quot;标识符命名规则&quot;">​</a></h3><ol><li><p>标识符可以由字母、数字、下划线(_)和美元符号($)组成，不能含有其他符号。（java 支持全球所有语言，所以这里的 字母 指的是任何一个国家的文字都可以）。</p></li><li><p>标识符不能以数字开头。</p></li><li><p>标识符不能是 Java 中的关键字，如 public、class、void 等。</p></li><li><p>标识符是区分大小写的，即 Foo 和 foo 是两个不同的标识符。</p></li><li><p>标识符的长度没有限制，但是 Java 建议使用有意义的、简短的标识符。</p></li></ol><h3 id="标识符命名规范" tabindex="-1">标识符命名规范 <a class="header-anchor" href="#标识符命名规范" aria-label="Permalink to &quot;标识符命名规范&quot;">​</a></h3><ol><li><p>见名知意</p></li><li><p>驼峰式命名方式</p></li><li><p>类名、接口名、枚举、注解：首字母大写，后面每个单词首字母大写。（StudentService，UserService）</p></li><li><p>变量名和方法名：首字母小写，后面每个单词首字母大写。（doSome，doOther）</p></li><li><p>常量名：全部大写，每个单词用下划线连接。（LOGIN_SUCCESS，SYSTEM_ERROR）</p></li><li><p>包名：全部小写</p></li></ol><h2 id="_2-2-关键字" tabindex="-1">2.2 关键字 ✅ <a class="header-anchor" href="#_2-2-关键字" aria-label="Permalink to &quot;2.2 关键字 :white_check_mark:&quot;">​</a></h2><h3 id="什么是关键字" tabindex="-1">什么是关键字 <a class="header-anchor" href="#什么是关键字" aria-label="Permalink to &quot;什么是关键字&quot;">​</a></h3><p>Java 关键字是 Java 编程语言中预定义的具有特殊含义的单词，这些单词不能被用作标识符，而是在语法中有特定的用法和限制。</p><h3 id="java-关键字有哪些" tabindex="-1">Java 关键字有哪些 <a class="header-anchor" href="#java-关键字有哪些" aria-label="Permalink to &quot;Java 关键字有哪些&quot;">​</a></h3><ol><li>Java 关键字都是小写的；</li><li><code>abstract</code>, <code>assert</code>, <code>boolean</code>, <code>break</code>, <code>byte</code>, <code>case</code>, <code>catch</code>, <code>char</code>, <code>class</code>, <code>continue</code>, <code>default</code>, <code>do</code>, <code>double</code>, <code>else</code>, <code>enum</code>, <code>extends</code>, <code>final</code>, <code>finally</code>, <code>float</code>, <code>for</code>, <code>if</code>, <code>implements</code>, <code>import</code>, <code>instanceof</code>, <code>int</code>, <code>interface</code>, <code>long</code>, <code>native</code>, <code>new</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>return</code>, <code>short</code>, <code>static</code>, <code>strictfp</code>, <code>super</code>, <code>switch</code>, <code>synchronized</code>, <code>this</code>, <code>throw</code>, <code>throws</code>, <code>transient</code>, <code>try</code>, <code>void</code>, <code>volatile</code>, <code>while</code>；</li><li>Java 保留字：<code>goto</code>，<code>const</code>。</li></ol><h2 id="_2-3-字面量" tabindex="-1">2.3 字面量 ✅ <a class="header-anchor" href="#_2-3-字面量" aria-label="Permalink to &quot;2.3 字面量 :white_check_mark:&quot;">​</a></h2><h3 id="什么是字面量" tabindex="-1">什么是字面量 <a class="header-anchor" href="#什么是字面量" aria-label="Permalink to &quot;什么是字面量&quot;">​</a></h3><p>字面量指的是在程序中直接使用的数据，字面量是 Java 中最基本的表达式，不需要进行计算或转换，直接使用即可。</p><h3 id="java-中有哪些字面量" tabindex="-1">Java 中有哪些字面量 <a class="header-anchor" href="#java-中有哪些字面量" aria-label="Permalink to &quot;Java 中有哪些字面量&quot;">​</a></h3><ul><li>整数型：10、-5、0、100</li><li>浮点型：3.14、-0.5、1.0</li><li>布尔型：true、false</li><li>字符型：&#39;a&#39;、&#39;b&#39;、&#39;c&#39;、&#39;1&#39;、&#39;2&#39;、&#39;国&#39;</li><li>字符串型：&quot;Hello&quot;、&quot;World&quot;、&quot;Java&quot;、&quot;你好呀&quot;</li></ul><h2 id="_2-4-变量" tabindex="-1">2.4 变量 ✅ <a class="header-anchor" href="#_2-4-变量" aria-label="Permalink to &quot;2.4 变量 :white_check_mark:&quot;">​</a></h2><h3 id="什么是变量" tabindex="-1">什么是变量？ <a class="header-anchor" href="#什么是变量" aria-label="Permalink to &quot;什么是变量？&quot;">​</a></h3><ol><li>变量是内存当中的一块空间。是计算机中存储数据最基本的单元。</li><li>变量三要素： <ul><li>数据类型（决定空间大小）【int, double, String】</li><li>变量名（只要是合法的标识符即可）</li><li>变量值（变量中具体存储的数据）</li></ul></li><li>变量的声明、赋值、访问 <ul><li>int i; //声明一个整数型的变量，起名</li><li>i = 100; //给变量 i 赋值 100</li><li>System.out.println(i); //访问 i 变量：读操作</li><li>i = 200; //访问 i 变量：改操作【给变量 i 重新赋值 200】</li></ul></li></ol><h3 id="变量的作用" tabindex="-1">变量的作用 <a class="header-anchor" href="#变量的作用" aria-label="Permalink to &quot;变量的作用&quot;">​</a></h3><ol><li>变量的存在会让程序更加便于维护。</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 222</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以上代码的设计就不如以下的代码：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 222</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="2"><li>变量的存在可以增强程序的可读性。</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以上代码的设计就不如以下的代码：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> π </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(π </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">变量的小细节</p><ol><li>变量必须先声明，再赋值，才能访问;</li><li>方法体当中的代码遵循自上而下的顺序依次逐行执行，变量先访问，再声明肯定是不行的;</li><li>一行代码上可以同时声明多个变量;</li><li>在同一个作用域当中，变量名不能重名，可以重新赋值;</li><li>变量值的数据类型必须和变量的数据类型一致，这样是不允许的：<code>String name = 100</code>;</li></ol></div><h3 id="变量的作用域" tabindex="-1">变量的作用域 <a class="header-anchor" href="#变量的作用域" aria-label="Permalink to &quot;变量的作用域&quot;">​</a></h3><ul><li>作用域就是变量的有效范围。变量的作用域是怎样的呢？用一句大白话就可以概括了：出了大括号就不认识了。</li><li>作用域的不同主要是因为声明在不同位置的变量具有不同的生命周期。所谓的生命周期是：从内存开辟到内存释放。</li><li>Java 遵循就近原则。</li></ul><h3 id="变量的分类" tabindex="-1">变量的分类 <a class="header-anchor" href="#变量的分类" aria-label="Permalink to &quot;变量的分类&quot;">​</a></h3><ul><li>局部变量</li><li>成员变量 <ul><li>静态变量</li><li>实例变量</li></ul></li></ul><h2 id="_2-5-二进制、八进制与十六进制" tabindex="-1">2.5 二进制、八进制与十六进制 ⭐ <a class="header-anchor" href="#_2-5-二进制、八进制与十六进制" aria-label="Permalink to &quot;2.5 二进制、八进制与十六进制 :star:&quot;">​</a></h2><h3 id="二进制概述" tabindex="-1">二进制概述 <a class="header-anchor" href="#二进制概述" aria-label="Permalink to &quot;二进制概述&quot;">​</a></h3><p>计算机底层只能识别二进制。计算机底层只识别二进制是因为计算机内部的电子元件只能识别两种状态，即开和关，或者高电平和低电平。二进制正好可以用两 种状态来表示数字和字符，因此成为了计算机最基本的表示方法。在计算机内部，所有的数据都被转化为二进制形式进行处理和存储。虽然计算机可以通过不同的编程语言和程序来处理不同的数据类型和格式，但最终都需要将其转化为二进制形式才能被计算机底层识别和处理。</p><h3 id="十进制与二进制的转换" tabindex="-1">十进制与二进制的转换 <a class="header-anchor" href="#十进制与二进制的转换" aria-label="Permalink to &quot;十进制与二进制的转换&quot;">​</a></h3><p>十进制 -&gt; 二进制：除 2 取余，一直到商为 0，最后将所有的余数逆序输出。 二进制 -&gt; 十进制：每一位与权值相乘求和。</p><h3 id="十进制与八进制的转换" tabindex="-1">十进制与八进制的转换 <a class="header-anchor" href="#十进制与八进制的转换" aria-label="Permalink to &quot;十进制与八进制的转换&quot;">​</a></h3><p>略</p><h3 id="十进制与十六进制转换" tabindex="-1">十进制与十六进制转换 <a class="header-anchor" href="#十进制与十六进制转换" aria-label="Permalink to &quot;十进制与十六进制转换&quot;">​</a></h3><p>略</p><h3 id="二进制与十六进制转换" tabindex="-1">二进制与十六进制转换 <a class="header-anchor" href="#二进制与十六进制转换" aria-label="Permalink to &quot;二进制与十六进制转换&quot;">​</a></h3><p>略</p><h2 id="_2-6-原码反码补码" tabindex="-1">2.6 原码反码补码 ✅ <a class="header-anchor" href="#_2-6-原码反码补码" aria-label="Permalink to &quot;2.6 原码反码补码 :white_check_mark:&quot;">​</a></h2><h3 id="byte-与-bit" tabindex="-1">byte 与 bit <a class="header-anchor" href="#byte-与-bit" aria-label="Permalink to &quot;byte 与 bit&quot;">​</a></h3><ul><li>byte（字节）是计算机存储和处理数据的基本单位，通常由 8 个比特（bit）组成。每个比特是计算机中最小的存储单位，只能存储 0 或 1 两个状态。因此，一个字节可以存储 8 个比特的数据。</li><li>两者之间的关系是：1 byte = 8 bit，即 8 个比特（bit）组成一个字节（byte）。</li><li>在计算机中，数据通常以字节（byte）为单位进行存储和传输，而比特（bit）则是用来表示数据的最小单位。</li><li>1KB = 1024byte</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1TB = 1024GB</li></ul><h3 id="原码、反码、补码" tabindex="-1">原码、反码、补码 <a class="header-anchor" href="#原码、反码、补码" aria-label="Permalink to &quot;原码、反码、补码&quot;">​</a></h3><ol><li>原码、反码、补码是计算机二进制的三种表示形式；</li><li>计算机在底层都是采用二进制补码形式表示的；</li><li>二进制位最高位成为符号位，0 为正数，1 为负数。</li></ol><h3 id="正数的原码、反码、补码" tabindex="-1">正数的原码、反码、补码 <a class="header-anchor" href="#正数的原码、反码、补码" aria-label="Permalink to &quot;正数的原码、反码、补码&quot;">​</a></h3><ol><li>正数的原码、反码、补码是相同；</li><li>请问正数 127 的原码、反码、补码分别是多少？（三者都是：0111 1111）</li></ol><h3 id="负数的原码、反码、补码" tabindex="-1">负数的原码、反码、补码 <a class="header-anchor" href="#负数的原码、反码、补码" aria-label="Permalink to &quot;负数的原码、反码、补码&quot;">​</a></h3><ol><li>负数的原码运算规则：将绝对值转化为二进制后，最高位改为 1；</li><li>-5 的原码：10000101；</li><li>-5 的反码：11111010；（原则是：<strong>以原码作为参考，符号位不变，其他位取反</strong>）</li><li>-5 的补码：11111011；（原则是：<strong>以反码作为参考，符号位不变，加 1</strong>）</li><li>补码 -&gt; 原码：补码最高位不变，其余取反加 1；</li><li>-128 的原码、反码、补码： <ul><li>原码：1000 0000</li><li>反码：1111 1111</li><li>补码：1000 0000</li></ul></li></ol><p>一个比特（1 bit）可以表示的数的范围：-128~127。</p><h3 id="计算机底层为什么采用补码" tabindex="-1">计算机底层为什么采用补码 <a class="header-anchor" href="#计算机底层为什么采用补码" aria-label="Permalink to &quot;计算机底层为什么采用补码&quot;">​</a></h3><ol><li>可以简化电路设计：采用补码形式可以将加减法运算转化为相同的操作，从而简化电路设计。</li><li>解决了 0 的正负问题：在原码中，0 有两个表示，+0 和-0，这样会导致计算结果不唯一，而在补码中，0 只有一种表示，即全 0，可以避免这个问题。</li><li>解决了负数溢出问题：在原码中，负数的表示范围比正数少 1，这样在进行减法运算时容易出现负数溢出的情况，而在补码中，负数的表示范围与正数相同，可以避免负数溢出的问题。</li><li>方便计算机进行运算：补码形式可以方便计算机进行加减法运算，而且可以使用相同的电路进行运算，从而提高了计算机的运算效率。</li></ol><h2 id="_2-7-数据类型" tabindex="-1">2.7 数据类型 ✅ <a class="header-anchor" href="#_2-7-数据类型" aria-label="Permalink to &quot;2.7 数据类型 :white_check_mark:&quot;">​</a></h2><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><ol><li><strong>整数型</strong></li></ol><ul><li><p>byte: 小整数</p></li><li><p>short: 中等大小整数</p></li><li><p>int: Java 最常用的整数</p></li><li><p>long: 极大或极小的整数 （BigInteger）</p></li></ul><p><strong>自动类型转换</strong>:</p><p>Java 中任何一个整数型字面量都会默认被当做 int 类型来处理。Java 中允许小容量的数据赋值给大容量的变量（自动类型转换）。取值容量排序： <code>byte &lt; short &lt; int &lt; long &lt; float &lt; double</code> 。</p><p><strong>强制类型转换</strong>：</p><p>① Java 中大容量是无法直接转换成小容量的，因为这种操作可能会导致精度损失。</p><p>② 强制类型转换时，底层二进制是如何变化的？原则：砍掉左侧多余的二进制。</p><p>③ 强制类型转换时，精度可能会损失，也可能不会损失，这要看具体的数据是否真正的超出了强转后的类型的取值范围。</p><p><strong>byte 的赋值</strong>:</p><p>① 在 Java 中有这样一个规定，当整数型字面量没有超出 byte 的范围：可以直接赋值给 byte 类型的变量。 <code>byte b = 127;</code> 这是允许的，很显然，这是一种编译优化。同时也是为了方便程序员写代码。</p><p>② 如果超出了范围，例如： <code>byte b = 128;</code> (编译报错)。这样就会报错，需要做强制类型转换，例如： <code>byte b = (byte)128;</code> （结果为-128）</p><p>③ 在整数类型中，除了 byte 有这个待遇之外， short 同样也是支持的。也就是说：如果整数型字面量没有超出 short 取值范围时，也是支持直接赋值的。</p><p>注：short 的赋值用法类似。</p><p><strong>两个 int 类型做运算</strong>：</p><p>① 两个 int 类型的数据做运算，最终的结果还是 int 类型；</p><p><strong>多种数据类型混合运算</strong>：</p><p>① 在 Java 中，多种数据类型混合运算时，各自先转换成容量最大的类型，再做运算</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试一下，如果 d 变量是 int 类型则编译器会报错</span></span></code></pre></div><p>byte 和 short 混合运算的时候，各自先转换成 int 再做运算。</p><ul><li><code>byte + byte ---&gt; int</code></li><li><code>byte + short ---&gt; int</code></li><li><code>short + short ---&gt; int</code></li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译器报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确</span></span></code></pre></div><ol start="2"><li><strong>浮点型</strong></li></ol><ul><li>float: 单精度，精度为 7 位小数</li></ul><p>-double: 双精度，精度为 15 位小数，Java 中最常用的浮点类型。（BigDecimal）</p><p><strong>浮点型字面量默认被当做 double</strong>：</p><ul><li>Java 中，浮点型字面量默认被当做 double 类型，如果要当做 float 类型，需要在数字后面添加 F 或 f。</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译报错</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错原因是：3.0 默认被当做 double 类型，大容量无法直接赋值给小容量。可以修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>double 精度高于 float：</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5656856894</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.5656856894</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5656856894F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.5656856</span></span></code></pre></div><p><strong>浮点型数据两种表示形式</strong>:</p><ul><li>十进制</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> .23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>科学计数法</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.123E2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.123 * 10 的平方</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123.34E-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123.34 / 10 的平方</span></span></code></pre></div><p><strong>浮点型数据存储原理</strong>⭐ ：</p><ul><li>符号位：0 表示整数。1 表示负数。</li><li>指数位：比如小数 0.123E30，其中 30 就是指数。表示 0.123 * 10 的 30 次幂。所以也有把指数位叫做偏移量的。最大偏移量 127。</li><li>尾数位：浮点数的小数部分的有效数字。例如：0.00123，那么尾数位存储 123 对应的二进制。</li><li>从浮点型数据存储原理上可以看到，二进制中的指数位决定了数字呈指数级增大。因此 float 虽然是 4 个字节，但却可以表示比 long 更大的数值。因此 float 容量比 long 的容量大。</li></ul><p><img src="`+o+`" alt="alt text" loading="lazy"></p><p><strong>浮点型数据使用注意事项</strong>：</p><p>一旦有浮点型数据参与运算得出的结果，一定不要使用“==”与其它数字进行“相等比较”</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不要这样使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2.3000000000000003</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;相等&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以这样比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.000001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;相等&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li><strong>布尔型</strong></li></ol><ul><li>boolean: 主要用于逻辑判断</li></ul><p>在 Java 中 boolean 类型只有两个值：true、false。没有其它值，没有 0 和 1 这一说。通常用于表示一些逻辑上的真假值，并在程序中进行逻辑控制，例如以下代码：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gender) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;男&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;女&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li><strong>字符型</strong></li></ol><ul><li><p>char: 单个字符</p></li><li><p>占用<strong>两个字节</strong>，取值范围：0 ~ 65535，和 short 容量相同，但 char 可以取更大的整数；</p></li><li><p>单个字符，使用单引号括起来，不能是多个字符；</p></li><li><p>可以保存一个汉字；</p></li><li><p><code>char c = &#39;&#39;;</code> 这是不允许的；</p></li><li><p><code>char c = &#39;\\u0000&#39;;</code> 这表示一个<strong>空字符</strong>，也是 char 的默认值。<code>\\u0000</code> 是一个 Unicode 码；(空格的 Unicode 码是 <code>\\u0020</code>)</p></li><li><p>空字符与空格字符是不同的。空字符表示什么也没有。空格字符表示一个空格。</p></li></ul><p><strong>转义字符</strong>:</p><ul><li><code>\\t</code>: 表示制表符，相当于按下 Tab 键；</li><li><code>\\n</code>: 表示换行符；</li><li><code>\\&quot;</code>: 表示双引号（&quot;）；</li><li><code>\\&#39;</code>: 表示单引号（&#39;）；</li><li><code>\\\\</code>: 表示反斜线（\\）本身。</li></ul><p><strong>字符编码</strong>:</p><p>字符编码是人为规定的文字与二进制之间的转换关系。在早期计算机系统中，字符编码主要采用的是 ASCII 编码，采用 1 个字节编码。最多可以表示 256 个字符（实际上 ASCII 码表只用了 128 个），程序员需要记住这几个:</p><ul><li>a 对应 ASCII 码 97（b 是 98，...）</li><li>A 对应 ASCII 码 65（B 是 66，...）</li><li>0 对应 ASCII 码 48（1 是 49，...）</li></ul><p><strong>常见的字符编码</strong>⭐ :</p><ul><li><strong>ASCII 编码</strong>（American Standard Code for Information Interchange：美国信息交换标准编码）：采用 1 个字节编码，包括字母、数字、符号和控制字符等。</li><li><strong>Latin-1 编码</strong>（ISO 8859-1），采用 1 个字节编码。该编码方式是为了表示欧洲语言（如荷兰语、西班牙语、法语、德语等）中的字符而设计的，共支持 256 个字符。</li><li><strong>ANSI 编码</strong>（American National Standards Institute：美国国家标准协会）：采用 1 个字节编码，支持英文、拉丁文等字符。两个 ANSI 码可以表示一个汉字。</li><li><strong>Unicode 编码</strong>：可表示所有语言的字符。采用了十六进制表示，占用 2 个字节或 4 个字节，最多可表示超过一百万个字符。（使用这种方式是有点浪费空间的，例如英文字符&#39;a&#39;其实采用一个字节存储就够了）<a href="http://www.jsons.cn/unicode/" target="_blank" rel="noreferrer">Unicode 在线转码工具</a></li><li><strong>UTF-8 编码</strong>（Unicode Transformation Format，8-bit）：基于 Unicode 编码的可变长度字符编码，能够支持多语言和国际化的需求，使用 1~4 个字节来表示一个字符，是目前 Web 开发中最常用的字符编码方式。 （一个英文字母 1 个字节，一个汉字 3 个字节）</li><li><strong>UTF-16 编码</strong>：基于 Unicode 编码的可变长度字符编码，使用 2 或 4 个字节来表示一个字符，应用于很多较早的系统和编程语言中。 （一个英文字母 2 个字节。一个汉字 4 个字节。）</li><li><strong>UTF-32 编码</strong>：基于 Unicode 编码的固定长度字符编码，其特点是每个字符占用 4 个字节。</li><li><strong>GB2312 编码（小）</strong>：是中国国家标准的简体中文字符集，使用 2 个字节来表示一个汉字，是 GBK 编码的前身。</li><li><strong>GBK 编码（Guo Biao Ku）（中）</strong>：是针对中文设计的一个汉字编码方式，使用 2 个字节来表示一个汉字，能够表示中国内地的所有汉字。</li><li><strong>GB18030 编码（大）</strong>：是中国国家标准 GB 18030-2005《信息技术 中文编码字符集》中规定的字符集编码方案，用于取代 GB2312 和 GBK 编码。</li><li><strong>Big5 编码（大五码）</strong>：是台湾地区的繁体中文字符集，使用 2 个字节来表示一个汉字，适用于使用繁体中文的应用场景。</li></ul><p><strong>char 参与的运算</strong>:</p><p>Java 中允许将一个整数赋值给 char 类型变量，但这个整数会被当做 ASCII 码值来处理需要特别注意的是，这个码值有要求，不能超出 char 的取值范围。 只要没有超出 byte short char 的取值范围，是可以直接赋值给 byte short char 类型变量的。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 98</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下程序结果是什么？</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译器报错</span></span></code></pre></div><p>注意，byte short char 混合运算时，各自会先转换成 int 再做运算!</p>`,114),E={tabindex:"0"},y=i("thead",null,[i("tr",null,[i("th",null,"数据类型"),i("th",null,"占用字节数"),i("th",null,"取值范围"),i("th",null,"具体取值范围"),i("th",null,"默认值")])],-1),u=i("td",null,"byte",-1),m=i("td",null,"1",-1),T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.879ex",height:"2.088ex",role:"img",focusable:"false",viewBox:"0 -841 1714.6 923","aria-hidden":"true"},Q=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" style="stroke-width:3;"></path></g></g></g></g>',1),F=[Q],v=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",null,"−"),i("msup",null,[i("mn",null,"2"),i("mn",null,"7")])])],-1),A={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},D={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.016ex",height:"2.088ex",role:"img",focusable:"false",viewBox:"0 -841 2659 923","aria-hidden":"true"},x=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1158.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2159,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),_=[x],f=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mn",null,"2"),i("mn",null,"7")]),i("mo",null,"−"),i("mn",null,"1")])],-1),C=i("td",null,"-128 ~ 127",-1),w=i("td",null,"0",-1),q=i("td",null,"short",-1),V=i("td",null,"2",-1),B={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},H={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.679ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 2068.1 915.9","aria-hidden":"true"},J=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1),S=[J],P=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",null,"−"),i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"15")])])])],-1),M={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},L={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.816ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3012.6 915.9","aria-hidden":"true"},j=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),I=[j],Z=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"15")])]),i("mo",null,"−"),i("mn",null,"1")])],-1),R=i("td",null,"-32768 ~ 32767",-1),O=i("td",null,"0",-1),N=i("td",null,"int",-1),G=i("td",null,"4",-1),z={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},U={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.679ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 2068.1 915.9","aria-hidden":"true"},K=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1),X=[K],$=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",null,"−"),i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"31")])])])],-1),W={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Y={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.816ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3012.6 915.9","aria-hidden":"true"},ii=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),si=[ii],ai=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"31")])]),i("mo",null,"−"),i("mn",null,"1")])],-1),li=i("td",null,"-2147483648 ~ 2147483647",-1),ti=i("td",null,"0",-1),ei=i("td",null,"long",-1),ni=i("td",null,"8",-1),hi={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},pi={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.679ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 2068.1 915.9","aria-hidden":"true"},di=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1),oi=[di],ki=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",null,"−"),i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"63")])])])],-1),ri={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ci={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.816ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3012.6 915.9","aria-hidden":"true"},gi=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),Ei=[gi],yi=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"63")])]),i("mo",null,"−"),i("mn",null,"1")])],-1),ui=i("td",null,"-9223372036854775808 ~ 9223372036854775807",-1),mi=i("td",null,"0L",-1),Ti=i("tr",null,[i("td",null,"float"),i("td",null,"4"),i("td",null,"1.4E-45 ~ 3.4028235E38"),i("td",null,"1.4E-45 ~ 3.4028235E38"),i("td",null,"0.0f")],-1),bi=i("tr",null,[i("td",null,"double"),i("td",null,"8"),i("td",null,"4.9E-324 ~ 1.79769313448623157E308"),i("td",null,"4.9E-324 ~ 1.79769313448623157E308"),i("td",null,"0.0d")],-1),Qi=i("tr",null,[i("td",null,"boolean"),i("td",null,"1"),i("td",null,"true/false"),i("td",null,"true/false"),i("td",null,"false")],-1),Fi=i("td",null,"char",-1),vi=i("td",null,"2",-1),Ai={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Di={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.816ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3012.6 915.9","aria-hidden":"true"},xi=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),_i=[xi],fi=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"16")])]),i("mo",null,"−"),i("mn",null,"1")])],-1),Ci=i("td",null,"0 ~ 65535",-1),wi=i("td",null,"'\\u0000'",-1),qi=s(`<p>关于默认值： Java 语言中变量必须先声明，再赋值，才能使用。对于局部变量来说必须手动赋值，而对于成员变量来说，如果没有手动赋值，系统会自动赋默认值。</p><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h3><p>类、接口、数组、枚举等</p><h2 id="_2-8-运算符" tabindex="-1">2.8 运算符 ✅ <a class="header-anchor" href="#_2-8-运算符" aria-label="Permalink to &quot;2.8 运算符 :white_check_mark:&quot;">​</a></h2><p>概览：</p><ul><li>算术运算符：+、-、*、/、%、++、--</li><li>关系运算符：==、!=、&gt;、&gt;=、&lt;、&lt;=</li><li>逻辑运算符：&amp;、|、!、&amp;&amp;、||</li><li>按位运算符：&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</li><li>赋值运算符：=、+=、-=、*=、/=、%=、&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</li><li>条件运算符：?:</li><li>instanceof 运算符：instanceof</li><li>new 运算符：new</li><li>. 运算符：.</li></ul><h3 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h3><ul><li><code>+</code> ：求和、字符串拼接、正数</li><li><code>-</code> ：相减、负数</li><li><code>*</code> ：乘积</li><li><code>/</code> ：商（除法）</li><li><code>%</code> ：取模（求余数），取模公式：<code>x - x / y * y</code></li><li><code>++</code> ：自加 1</li><li><code>--</code> ：自减 1</li></ul><h3 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-label="Permalink to &quot;关系运算符&quot;">​</a></h3><p>关系运算符又叫做比较运算符。包括： <code>&gt;</code> 、 <code>&gt;=</code> 、 <code>&lt;</code> 、 <code>&lt;=</code> 、 <code>==</code> 、 <code>!=</code> 。所有关系运算符的运算结果都是布尔类型，不是 true，就是 false。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><p>逻辑运算符： <code>&amp;</code> （逻辑与）、 <code>|</code> （逻辑或）、 <code>!</code> （逻辑非）、 <code>^</code> （逻辑异或）、 <code>&amp;&amp;</code> （短路与）、 <code>||</code> （短路或）。</p><p>逻辑运算符特点：逻辑运算符两边的操作数要求必须是布尔类型，并且最终运算结果也一定是布尔类型。</p><ul><li><p>逻辑与 <code>&amp;</code>：两边操作数都是 true，结果才是 true。</p></li><li><p>逻辑或 <code>|</code>：两边操作数只要有一个是 true，结果就是 true。</p></li><li><p>逻辑非 <code>!</code>： !false 就是 true，!true 就是 false。</p></li><li><p>逻辑异或 <code>^</code>：咱俩不一样，结果就是 true。</p></li><li><p>短路与 <code>&amp;&amp;</code>：和逻辑与&amp;的运算结果相同。只是存在一种短路现象。（左边操作数为 false 时，右边操作数不执行）</p></li><li><p>短路或 <code>||</code>：和逻辑或|的运算结果相同。只是存在一种短路现象。（左边操作数为 true 时，右边操作数不执行）</p></li></ul><p>虽然短路与 &amp;&amp; 效率高于逻辑与 &amp;，但逻辑与 &amp; 也有用武之地，具体看需求是怎样的。</p><h3 id="按位运算符" tabindex="-1">按位运算符 <a class="header-anchor" href="#按位运算符" aria-label="Permalink to &quot;按位运算符&quot;">​</a></h3><p>按位运算符用于在二进制位级别上处理整数数据。主要包括：</p><ul><li>左移 <code>&lt;&lt;</code></li><li>右移 <code>&gt;&gt;</code></li><li>无符号右移 <code>&gt;&gt;&gt;</code></li><li>按位与 <code>&amp;</code></li><li>按位或 <code>|</code></li><li>按位异或 <code>^</code></li><li>按位取反 <code>~</code></li></ul><p>注意：按位运算符的操作数要求必须是<strong>整数</strong>，否则会出现编译错误。</p><p>**左移 <code>&lt;&lt;</code> **：</p><p>它能够将一个二进制数的所有位向左移动指定的位数。左移运算符的运算规则如下：</p><blockquote><ol><li><p>将二进制数左移 n 位，相当于将数值乘以 2 的 n 次方。例如，将二进制数 0b1011 左移 2 位，即为 0b101100，相当于将 11 乘以 2 的 2 次方（即 4），得到 44。&gt;</p></li><li><p>左移运算符不会改变操作数的符号。左移后，右补 0。无论操作数是正数、负数还是零，左移运算符都只进行位级移动，不会改变符号。</p></li><li><p>左移运算符会对溢出进行截断。</p></li></ol></blockquote><p>例子：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原码：10000000 00000000 00000000 01100100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 反码：11111111 11111111 11111111 10011011（原码取反）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 补码：11111111 11111111 11111111 10011100（补码加1）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 左移：11111111 11111111 11111110 01110000 (左移2位)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原码：10000000 00000000 00000001 10010000（-400）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -400（-100 * 2^2）</span></span></code></pre></div><p>**右移 <code>&gt;&gt;</code> **:</p><p>它能够将一个二进制数的所有位向右移动指定的位数。右移运算符的运算规则如下：</p><blockquote><ol><li><p>将二进制数右移 n 位，相当于将数值除以 2 的 n 次方。例如，将二进制数 0b101100 右移 2 位，即为 0b1011，相当于将 44 除以 2 的 2 次方（即 4 ），得到 11。</p></li><li><p>右移运算符对正数、负数和零的处理方式不同。<strong>对于正数，符号位不变，右移时左补 0。对于负数，符号位不变，右移时左补 1。对于零，右移运算符操作后结果仍为零。</strong></p></li><li><p>右移运算符会对溢出进行截断。</p></li></ol></blockquote><p>**无符号右移 <code>&gt;&gt;&gt;</code> **：</p><p>它能够将一个二进制数的所有位向右移动指定的位数，而不考虑符号位。无符号右移运算符的运算规则如下：</p><blockquote><ol><li><p>将二进制数右移 n 位，相当于将数值除以 2 的 n 次方，并将最高位填充为 0；</p></li><li><p>任意一个数字经过无符号右移之后，最终结果一定是非负数（0 或正整数）；</p></li><li><p>无符号右移运算符对溢出进行截断。</p></li></ol></blockquote><p>注意：byte 的无符号右移动</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1073741792 并不是 -32</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// byte 和 int 混合运算，会先将 byte 转换成 int，再做运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -32</span></span></code></pre></div><p>**按位与 <code>&amp;</code> **：</p><p>将两个整数的二进制表示按位进行与运算，只有当相应的二进制位都为 1 时，结果才为 1，否则结果为 0。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a的二进制： 00100000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b的二进制： 00011001</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按位与之后：00000000</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">应用</p><p>请使用按位与运算符判断某个数字是否为奇数？思路：拿着这个数字和 1 进行按位与，如果结果是 1，则表示该数字为奇数。</p></div><p>**按位或 <code>|</code> **:</p><p>将两个整数的二进制表示按位进行或运算，只有当相应的二进制位都为 0 时，结果才为 0，否则结果为 1。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 57</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a的二进制： 00100000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b的二进制： 00011001</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按位或之后：00111001</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">应用-设置标志位</p><p>请将 0 这个数字中第 4 位的二进制位设置为 1（按位或的具体应用，将某个二进制位设置为 1）</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></div><p>**按位异或 <code>^</code> **:</p><p>将两个整数的二进制表示按位进行异或运算，只有当相应的二进制位不同，结果才为 1，否则结果为 0。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 172</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a的二进制：01100100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b的二进制：11001000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按位异或之后：10101100</span></span></code></pre></div><p>按位异或运算符具有自反性，所谓的自反性是指：数字 A 连续对数字 B 进行两次按位异或运算之后，可以得到原始的数字 A。因为按位异或运算符具有这样的特征，所以在密码学方面应用广泛。</p><div class="info custom-block"><p class="custom-block-title">应用</p><p>按位异或可以实现简单的加密和解密。</p></div><p>**按位取反 <code>~</code> **:</p><p>将整数的二进制表示按位进行取反运算，即 0 变为 1，1 变为 0。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100的二进制：01100100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取反后：10011011（这是一个补码哦）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将补码转为原码：11100101 （-101）</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">应用</p><p>位清除操作（将某个二进制位中指定位清除为 0），例如有这样一个二进制：0b01101101，将第 4 个低位清除为 0</p></div><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b01101101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 待清除数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要清除第4个低位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flag);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用这种方式运算进行位清除</span></span></code></pre></div><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><h4 id="基本赋值运算符" tabindex="-1">基本赋值运算符 <a class="header-anchor" href="#基本赋值运算符" aria-label="Permalink to &quot;基本赋值运算符&quot;">​</a></h4><p><code>=</code> 等号右边先执行，将直接结果赋值给左边的变量</p><h4 id="扩展赋值运算符" tabindex="-1">扩展赋值运算符 <a class="header-anchor" href="#扩展赋值运算符" aria-label="Permalink to &quot;扩展赋值运算符&quot;">​</a></h4><ol><li><p><code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;&gt;=</code></p></li><li><p>以 <code>+=</code> 为例。i += 3; 表示 i = i + 3;</p></li><li><p>+= 就是先 + 后 =，也就是先求和，然后将求和的结果重新赋值。</p></li><li><p>对于扩展赋值运算符来说，有一个非常重要的运算规则需要注意：<strong>扩展赋值运算符不会改变运算结果的类型</strong>。（即使精度损失了，也不会改变运算结果类型）</p></li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译通过</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译通过</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// m = m + 20; 不会进行强制类型转换，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 而 m += 20; 会进行强制类型转换, m = (byte)(m + 20)。</span></span></code></pre></div><h3 id="条件运算符" tabindex="-1">条件运算符 <a class="header-anchor" href="#条件运算符" aria-label="Permalink to &quot;条件运算符&quot;">​</a></h3><p>Java 语言中的条件运算符由 ? 和 : 组成，也被称为三元运算符。它的语法格式为：</p><p><code>布尔表达式 ? 表达式 1 : 表达式 2;</code></p><p>当布尔表达式的值为 true 时，条件运算符的结果为表达式 1 的值，否则为表达式 2 的值。这种运算符常用于简化 <code>if-else</code> 语句的代码量。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下面是一个条件运算符的简单示例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;最大值为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max);</span></span></code></pre></div><p>在上述代码中，首先定义了两个变量 a 和 b，然后使用条件运算符比较这两个变量的大小，取其中较大值作为变量 max 的值，最后输出结果。当 a &gt; b 的结果为 false 时，条件运算符的结果为表达式 2，即 b 的值为变量 max 的值。当 a &gt; b 的结果为 true 时，条件运算符的结果为表达式 1，即 a 的值为变量 max 的值。</p><p>总的来说，条件运算符在 Java 中的使用相对简单，能够减少代码重复和代码量，常用于简单的条件处理和表达式值的判断。</p><h3 id="instanceof-运算符" tabindex="-1"><code>instanceof</code> 运算符 <a class="header-anchor" href="#instanceof-运算符" aria-label="Permalink to &quot;\`instanceof\` 运算符&quot;">​</a></h3><p>略</p><h3 id="new-运算符" tabindex="-1"><code>new</code> 运算符 <a class="header-anchor" href="#new-运算符" aria-label="Permalink to &quot;\`new\` 运算符&quot;">​</a></h3><p>略</p><h3 id="运算符" tabindex="-1"><code>.</code> 运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;\`.\` 运算符&quot;">​</a></h3><p>略</p><h2 id="_2-9-控制语句" tabindex="-1">2.9 控制语句 ✅ <a class="header-anchor" href="#_2-9-控制语句" aria-label="Permalink to &quot;2.9 控制语句 :white_check_mark:&quot;">​</a></h2><p>控制语句：用于控制程序的执行流程，改变程序执行的次序。</p><h3 id="分支语句" tabindex="-1">分支语句 <a class="header-anchor" href="#分支语句" aria-label="Permalink to &quot;分支语句&quot;">​</a></h3><h4 id="if-语句" tabindex="-1">if 语句 <a class="header-anchor" href="#if-语句" aria-label="Permalink to &quot;if 语句&quot;">​</a></h4><p>if 语句写法 1：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支语句;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果布尔表达式 true，则执行分支语句。如果为 false，则不执行。</p><p>if 语句写法 2：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>if 语句写法 3：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支3;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>if 语句写法 4：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支3;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    分支4;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-label="Permalink to &quot;switch 语句&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expression) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>switch 语句使用注意事项：</p><blockquote><ol><li>switch 语句适用于判断固定值。if 语句适用于判断范围或区间时使用。switch 能做的 if 肯定能做，if 能完成的 switch 不一定能完成。</li><li>JDK7 之前，switch 只支持 <strong>int 类型</strong>、<strong>枚举类型</strong>，在 JDK7 之后，增加了对<strong>字符串类型</strong>的支持。</li><li>case 语句中的值必须是字面量，不能是变量。</li><li>case 语句中的值必须和 switch 后面的值是同一类型，或者能够相互转换。</li><li>case 可以合并。</li><li>在每个 case 分支中要加上 break 语句，以避免 case 穿透现象。</li><li>在 switch 语句中，一般都应该有一个 default 分支，用于处理一些特殊情况，以避免程序出错。（当然，default 语句不写，也不会编译报错）</li><li>switch 语句中的 default 分支可以放在 switch 块的任意位置，但是通常建议将 default 分支放在所有 case 分支的最后面。（可读性好）</li></ol></blockquote><p>Java12 switch 新特性：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语句1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语句2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语句3;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1, value2, value3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语句1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语句2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        语句1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        语句2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-label="Permalink to &quot;循环语句&quot;">​</a></h3><h4 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(初始化表达式; 条件表达式; 更新表达式) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 循环体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>初始化表达式最先执行，并且只执行 1 次；</li><li>条件表达式执行结果必须是一个布尔类型的值；</li><li>更新表达式用于更新变量值；</li></ul><h4 id="while-循环" tabindex="-1">while 循环 <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;while 循环&quot;">​</a></h4><p>while 循环语法格式：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    循环体;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行原理：只要布尔表达式为 true 就会一直循环，直到布尔表达式结果为 false，循环结束。while 循环体的执行次数可能是：0 ~ n 次。 for 循环适用于循环次数固定的。while 循环适用于循环次数不固定的。</p><h4 id="do-while-循环" tabindex="-1">do while 循环 <a class="header-anchor" href="#do-while-循环" aria-label="Permalink to &quot;do while 循环&quot;">​</a></h4><p>do while 循环语法格式：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    循环体;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔表达式);</span></span></code></pre></div><p>执行原理：先执行一次循环体，再判断布尔表达式，为 true 继续循环，直到布尔表达式结果为 false，循环结束。 do while 循环体的执行次数可能是：1 ~ n 次。do while 循环比较适合用在不管条件是否成立，第一次必须要执行的业务。</p><h3 id="跳转语句" tabindex="-1">跳转语句 <a class="header-anchor" href="#跳转语句" aria-label="Permalink to &quot;跳转语句&quot;">​</a></h3><h4 id="break-语句" tabindex="-1">break 语句 <a class="header-anchor" href="#break-语句" aria-label="Permalink to &quot;break 语句&quot;">​</a></h4><p>break:</p><ul><li>出现在 switch 语句用来终止 switch 语句的执行。</li><li>出现在循环中，用来终止循环的执行。</li><li><code>break;</code> 用来终止离它最近的循环。</li><li><code>break 循环标记;</code> 用来终止指定的循环。</li></ul><h4 id="continue-语句" tabindex="-1">continue 语句 <a class="header-anchor" href="#continue-语句" aria-label="Permalink to &quot;continue 语句&quot;">​</a></h4><p>continue:</p><ul><li>终止当前本次循环，直接进入下一次循环继续执行。</li><li><code>continue;</code> 终止当前本次循环，直接进入离它最近的循环继续。</li><li><code>continue 循环标记;</code> 终止当前本次循环，直接进入指定的循环继续。</li></ul><p><code>break;</code> 与 <code>return;</code> 的区别：</p><ul><li><code>break;</code> 终止循环。</li><li><code>return;</code> 终止方法。</li></ul><h2 id="_2-10-方法" tabindex="-1">2.10 方法 ✅ <a class="header-anchor" href="#_2-10-方法" aria-label="Permalink to &quot;2.10 方法 :white_check_mark:&quot;">​</a></h2><h3 id="方法的定义和调用" tabindex="-1">方法的定义和调用 <a class="header-anchor" href="#方法的定义和调用" aria-label="Permalink to &quot;方法的定义和调用&quot;">​</a></h3><p>方法（Method）是一段可以被重复利用的代码片段。一个方法一般都是一个独立的功能。在 C 语言中叫做函数（Function）。</p><p>语法格式：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[修饰符列表] 返回值类型 方法名(形式参数列表){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    方法体;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>修饰符列表：可选项。目前固定写法 public static (后面讲解)。</li><li>返回值类型：用来指定方法返回值的数据类型（方法执行结束后的结果类型）。只要是 Java 合法的数据类型，都可以，例如：<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>boolean</code>, <code>char</code>, <code>String</code>...。如果方法执行结束时没有返回任何数据，返回值类型也不能空着，需要写 <code>void</code> 关键字。</li><li>方法名：只要是合法的标识符即可。但最好见名知意。方法通常反应行为，所以方法名一般为<strong>动词</strong>。</li><li>形式参数列表：简称形参。用来接收数据。参数个数 0 ~ N 个。如果有多个，使用逗号隔开。例如（int a, double b, long c）。每一个形式参数都可以看做局部变量。</li><li>每个方法都有方法体，方法体是一对大括号。在大括号中编写 Java 语句。</li><li>方法的调用：如果修饰符列表中 <code>static</code> 关键字，采用“类名. 方法名(实际参数列表); ”调用方法。 <ul><li>调用者和被调用者在同一个类中，“类名.”可以省略。</li><li>实际参数列表：简称实参，实参和形参要一一对应，个数对应，数据类型对应。</li></ul></li><li>调用方法，如果方法执行结束后有返回值，可以采用变量接收该返回值。当然，也可以选择不接收。</li></ul><h3 id="方法执行时的内存变化" tabindex="-1">方法执行时的内存变化 <a class="header-anchor" href="#方法执行时的内存变化" aria-label="Permalink to &quot;方法执行时的内存变化&quot;">​</a></h3><ul><li>方法只定义不调用是不会分配内存的。只是方法的字节码指令存储在元空间中。</li><li>方法调用时会给该方法在 JVM 的栈内存中分配空间，此时发生压栈动作。这个方法的空间被称为栈帧。</li><li>栈帧中主要包括：局部变量表，操作数栈等。</li><li>方法执行结束时，该栈帧弹栈，方法内存空间释放。</li></ul><p><img src="`+k+'" alt="alt text" loading="lazy"></p><h3 id="方法重载" tabindex="-1">方法重载 <a class="header-anchor" href="#方法重载" aria-label="Permalink to &quot;方法重载&quot;">​</a></h3><p>方法重载（overload）：编译阶段的一种机制（静态多态）。</p><ol><li><p>什么情况下构成方法重载？</p><ul><li><p>在同一个类中</p></li><li><p>方法名相同</p></li><li><p>参数列表不同：</p><ul><li>类型不同算不同</li><li>顺序不同算不同</li><li>个数不同算不同</li></ul></li></ul></li><li><p>什么时候我们考虑使用方法重载？</p><ul><li>在同一个类中，如果功能相似，建议使用方法重载。</li></ul></li><li><p>方法重载好处？</p><ul><li>简化代码调用。</li><li>更易维护。</li><li>代码美观。</li></ul></li></ol><h3 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h3><ul><li>什么是方法的递归调用？方法自己调用自己。</li><li>递归时，内存是如何变化的？</li><li>递归使用注意事项？ <ul><li>递归必须要有结束条件。</li><li>递归和循环都能完成的话，优先选择循环。（递归更耗费内存。）</li></ul></li><li>递归有结束条件，就一定不会栈内存溢出吗？</li><li>实际开发中，使用递归时，发生栈内存溢出，你该怎么办？ <ul><li>首先可以调整栈内存的大小，扩大栈内存；</li></ul></li></ul><p><img src="'+r+'" alt="alt text" loading="lazy"></p><h2 id="_2-11-package-和-import" tabindex="-1">2.11 package 和 import ✅ <a class="header-anchor" href="#_2-11-package-和-import" aria-label="Permalink to &quot;2.11 package 和 import :white_check_mark:&quot;">​</a></h2><h3 id="package-包机制" tabindex="-1">package（包机制） <a class="header-anchor" href="#package-包机制" aria-label="Permalink to &quot;package（包机制）&quot;">​</a></h3><ul><li>包机制作用：便于代码管理。</li><li>怎么定义包：在 java 源码第一行编写 package 语句。注意：package 语句只能出现在 java 代码第一行。</li><li>包名命名规范中要求是全部小写。</li><li>包名命名规范：公司域名倒序 + 项目名 + 模块名 + 功能名。例如：<code>com.baidu.oa.empgt.service</code>。 如果带包编译：<code>javac -d</code> + 编译后的存放目录 + java 源文件路径。</li><li>有了包机制后，完整类名是包含包名的，例如类名是：<code>com.powernode.javase.chapter02.PackageTest</code>。</li></ul><h3 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h3><ul><li>import 语句用来引入其他类。</li><li>A 类中使用 B 类，A 类和 B 类不在同一个包下时，就需要在 A 类中使用 import 引入 B 类。</li><li>java.lang 包下的类不需要手动引入。</li><li>import 语句只能出现在 package 语句之下，class 定义之前。</li><li>import 语句可以编写多个。</li><li>import 语句可以模糊导入：<code>java.util.*</code>;</li><li>import 静态导入：<code>import static java.lang.System.*</code>;</li></ul><h3 id="补充知识-常用的-idea-快捷键-for-win" tabindex="-1">补充知识：常用的 IDEA 快捷键（For Win） <a class="header-anchor" href="#补充知识-常用的-idea-快捷键-for-win" aria-label="Permalink to &quot;补充知识：常用的 IDEA 快捷键（For Win）&quot;">​</a></h3><ul><li>新建/新增任何东西：<code>alt + insert</code></li><li>退出任何窗口：<code>ESC</code></li><li>编写源码的窗口最大化: <code>ctrl+shift+F12</code></li><li>生成 main 方法: <code>psvm </code></li><li>快速生成输出语句: <code>sout</code></li><li>IDEA 会自动保存，自动编译</li><li>打开 Project 窗口: <code>alt+1</code></li><li>查找某个类：敲两次 shift，选择 classes，输入类名</li><li>切换选项卡：<code>alt + 左右方向键</code></li><li>自动生成变量: <code>.var</code></li><li>删除一行: <code>ctrl + y</code></li><li>复制一行: <code>ctrl + d</code></li><li>在一个类当中查找方法: <code>ctrl + F12</code></li><li>生成 for 循环：<code>fori</code></li><li>自动生成 if 语句: <code>.if</code></li><li>单行注释：<code>ctrl + /</code></li><li>多行注释：<code>ctrl + shift + /</code></li><li>查看源码：按 ctrl 别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码</li><li>多行编辑：按 alt 别松手，鼠标拖动多行，完成多行编辑</li><li>怎么快速生成创建对象语句：<code>类名.new.var</code></li><li>怎么快速生成 if 语句：<code>布尔类型值.if</code></li><li>怎么快速生成 setter 和 getter 方法：<code>alt + insert</code>，然后选择 <code>setter and getter</code> 生成</li><li>怎么快速生成构造方法：<code>alt + insert</code>，然后选择 Constructor。</li><li>在 IDEA 当中如何自动纠错：将光标移动到错误的位置，按 <code>atl + enter</code>。会有提示，根据提示进行纠错</li><li>移动代码到上一行：<code>alt + shift + 上/下方向</code></li><li>怎么快速重写方: <code>alt + insert</code>，选择 Override....</li><li>怎么快速重写方法: <code>ctrl + o</code></li><li>快速向下转型，并同时生成变量名：<code>变量名.castvar</code></li><li>快速查看方法的参数：<code>ctrl + p</code></li><li>返回上一步：<code>ctrl + alt + 左方向键</code>; 下一步：<code>ctrl + alt + 右方向键</code></li><li>代码格式化：<code>ctrl + alt + L</code></li><li>查看继承结构：<code>ctrl + H</code></li></ul><h3 id="补充知识-常用的-idea-快捷键-for-mac" tabindex="-1">补充知识：常用的 IDEA 快捷键（For Mac） <a class="header-anchor" href="#补充知识-常用的-idea-快捷键-for-mac" aria-label="Permalink to &quot;补充知识：常用的 IDEA 快捷键（For Mac）&quot;">​</a></h3><h4 id="常用快捷键" tabindex="-1">常用快捷键 <a class="header-anchor" href="#常用快捷键" aria-label="Permalink to &quot;常用快捷键&quot;">​</a></h4><ul><li><code>command + F</code> 在当前文件进行文本查找</li><li><code>command + shift + F</code> 进行工程和模块中的文件搜索</li><li><code>command+u</code> 找到这个方法的接口</li><li><code>command+ option + b</code> 找到这个接口的实现类</li><li><code>command + /</code> 对代码进行注释，并且自动移动到下一行</li><li><code>option + command + L</code> 进行格式化代码</li><li><code>command + shift + R</code> 进行整个项目或者指定目录文件进行替换</li></ul><h4 id="editing-编辑" tabindex="-1">Editing(编辑) <a class="header-anchor" href="#editing-编辑" aria-label="Permalink to &quot;Editing(编辑)&quot;">​</a></h4><ul><li><code>command + J</code> 快速查看文档 （按F1也可以）</li><li><code>shift + F1</code> 快速查看外部文档</li><li><code>command + N</code> 生成get、set方法</li><li><code>control + O</code> 重写父类方法</li><li><code>control + I</code> 实现接口方法</li><li><code>command + option + T</code> 包围代码</li><li><code>command + option + /</code> 块注释</li><li><code>option + 向上</code> 选中代码块，向下取消</li><li><code>option + enter</code> 显示意向动作</li><li><code>control + option + I</code> 自动缩进线</li><li><code>command + option + L</code> 格式化代码</li><li><code>command + option + O</code> 优化import</li><li><code>command + shift + V</code> 从最近的缓存区选择粘贴</li><li><code>command + D</code> 复制当前行或选定的块</li><li><code>command + delete</code> 删除当前行或选定的块</li><li><code>shift + enter</code> 开始新的一行</li><li><code>command + shift + U</code> 大小写切换</li><li><code>command + shift + [ /command + shift + ]</code> 选择代码块开始/结束</li><li><code>option + fn + delete</code> 删除到单词末尾</li><li><code>option + delete</code> 删除到单词开始</li><li><code>command + 加号/command + 减号</code> 展开/折叠代码块</li><li><code>command + shift + 加号</code> 展开所有代码块</li><li><code>command + shift + 减号</code> 折叠所有代码块</li><li><code>command + W</code> 关闭活动的编辑选项卡</li></ul><h4 id="查询-替换-search-replace" tabindex="-1">查询/替换（search/replace） <a class="header-anchor" href="#查询-替换-search-replace" aria-label="Permalink to &quot;查询/替换（search/replace）&quot;">​</a></h4><ul><li><code>double shift</code> 查询任何东西</li><li><code>command + G</code> 向下查找</li><li><code>command + shift + G</code> 向上查找</li><li><code>command + R</code> 文件内替换</li><li><code>command + shift + F</code> 全局查找（根据路径）</li><li><code>command + shift + R</code> 全局替换（根据路径）</li></ul><h4 id="编译和运行-compile-and-run" tabindex="-1">编译和运行（compile and run） <a class="header-anchor" href="#编译和运行-compile-and-run" aria-label="Permalink to &quot;编译和运行（compile and run）&quot;">​</a></h4><ul><li><code>command + F9</code> 编译project</li><li><code>control + option + R</code> 弹出run的可选菜单</li><li><code>control + option + D</code> 弹出debug可选菜单</li><li><code>control + R</code>运行</li><li><code>control + D</code> 调试</li></ul><h4 id="使用查询-usage-search" tabindex="-1">使用查询（usage search） <a class="header-anchor" href="#使用查询-usage-search" aria-label="Permalink to &quot;使用查询（usage search）&quot;">​</a></h4><ul><li><code>option + F7/command + F7</code> 在文件中查找用法/在类中查找用法</li><li><code>command + option + F7</code> 显示用法</li></ul><h4 id="debug-调试" tabindex="-1">debug 调试 <a class="header-anchor" href="#debug-调试" aria-label="Permalink to &quot;debug 调试&quot;">​</a></h4><ul><li><code>F8</code> 进入下一步，不进入方法</li><li><code>F7</code> 进入下一步，进入方法，不进入嵌套方法</li><li><code>shift + F7</code> 智能步入，断点运行的行上如果调用多个行，会弹出进入哪个方法</li><li><code>shift + F8</code> 跳出</li><li><code>option + F9</code> 运行到光标出，如果在光标前面还有断点，则进入到断点</li><li><code>option + F8</code> 计算表达式（可以改变变量值，使其生效）</li><li><code>command + option + R</code> 恢复断点运行，进入到下一个断点（如果还有）</li><li><code>command + F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li><code>command + shift + F8</code> 查看断点信息</li></ul><h4 id="navigation-导航" tabindex="-1">Navigation (导航) <a class="header-anchor" href="#navigation-导航" aria-label="Permalink to &quot;Navigation (导航)&quot;">​</a></h4><ul><li><code>command + O</code> 查找类文件</li><li><code>command + shift + O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面加上一个反斜杠</li><li><code>command + option + O</code> 前往指定的变量/方法</li><li><code>command + L</code> 在当前文件跳转到指定行位置</li><li><code>command + E</code> 显示最近打开的文件记录</li><li><code>option + 方向键</code> 光标跳转到当前语句的首位或末尾</li><li><code>command + shift + 方向键</code> 退回/前进到上一个操作的地方</li><li><code>command + shift + delete</code> 跳转到最后一个编辑地方</li><li><code>command + Y</code> 快速打开光标所在的方法、定义</li><li><code>control + shift + B</code> 跳转到类型定义处</li><li><code>command + U</code> 跳转到光标所在的方法所在父类的方法/接口定义</li><li><code>control + 方向键</code> 上一个方法/下一个方法</li><li><code>command + F12</code> 在类中找方法</li><li><code>control + H</code> 显示当前类的结构层次</li><li><code>command + shift + H</code> 显示方法的结构层次</li><li><code>control + option + H</code> 显示调用层次结构</li><li><code>F2</code> 跳转到下一个警告或错误处</li></ul><h4 id="refactoring-重构" tabindex="-1">Refactoring（重构） <a class="header-anchor" href="#refactoring-重构" aria-label="Permalink to &quot;Refactoring（重构）&quot;">​</a></h4><ul><li><code>F5</code> 复制文件到指定目录</li><li><code>F6</code> 移动文件到指定目录</li><li><code>Command + Delete</code> 在文件上为安全删除文件，弹出确认框</li><li><code>Shift + F6</code> 重命名文件</li><li><code>Command + F6</code> 更改签名</li><li><code>Command + Option + N</code> 一致性</li><li><code>Command + Option + M</code> 将选中的代码提取为方法</li><li><code>Command + Option + V</code> 提取变量</li><li><code>Command + Option + F</code> 提取字段</li><li><code>Command + Option + C</code> 提取常量</li><li><code>Command + Option + P</code> 提取参数</li></ul>',149);function Vi(Bi,Hi,Ji,Si,Pi,Mi){const h=n("a-back-top"),p=n("reading-progress-bar");return l(),a("div",null,[g,i("table",E,[y,i("tbody",null,[i("tr",null,[u,m,i("td",null,[i("mjx-container",T,[(l(),a("svg",b,F)),v]),t(" ~ "),i("mjx-container",A,[(l(),a("svg",D,_)),f])]),C,w]),i("tr",null,[q,V,i("td",null,[i("mjx-container",B,[(l(),a("svg",H,S)),P]),t(" ~ "),i("mjx-container",M,[(l(),a("svg",L,I)),Z])]),R,O]),i("tr",null,[N,G,i("td",null,[i("mjx-container",z,[(l(),a("svg",U,X)),$]),t(" ~ "),i("mjx-container",W,[(l(),a("svg",Y,si)),ai])]),li,ti]),i("tr",null,[ei,ni,i("td",null,[i("mjx-container",hi,[(l(),a("svg",pi,oi)),ki]),t(" ~ "),i("mjx-container",ri,[(l(),a("svg",ci,Ei)),yi])]),ui,mi]),Ti,bi,Qi,i("tr",null,[Fi,vi,i("td",null,[t("0 ~ "),i("mjx-container",Ai,[(l(),a("svg",Di,_i)),fi])]),Ci,wi])])]),qi,e(h),e(p)])}const Ii=d(c,[["render",Vi]]);export{ji as __pageData,Ii as default};
