import{$ as i,U as o,c as a,aA as r,ab as e,S as s}from"./chunks/framework.BDLhZlrp.js";const n="/knowledge-map/assets/image01.B6afxAa1.png",p="/knowledge-map/assets/image02.DSxQgkEP.png",d="/knowledge-map/assets/image03.B9A0PxD8.png",h="/knowledge-map/assets/image04.eQm5H7rN.png",c="/knowledge-map/assets/image05.BwVdtxmi.png",m="/knowledge-map/assets/image06.D3pJ8gGh.png",g="/knowledge-map/assets/image07.CUFYKeCe.png",u="/knowledge-map/assets/image08.CaAnzkWz.png",S="/knowledge-map/assets/image09.CKz-AJX2.png",_="/knowledge-map/assets/image10.KNa_d0bK.png",b="/knowledge-map/assets/image11.CsHDIL19.png",y="/knowledge-map/assets/image12.SWxnnO6L.png",q="/knowledge-map/assets/image13.C22KvciF.png",L="/knowledge-map/assets/image14.1u4ritBl.png",Q="/knowledge-map/assets/image15.D43CJDTd.png",k="/knowledge-map/assets/image16.mSO5KG27.png",M="/knowledge-map/assets/image17.Cimfchua.png",x="/knowledge-map/assets/image18.BmFFb5XI.png",f="/knowledge-map/assets/image19.CPUX_6SI.png",P="/knowledge-map/assets/image20.B5gy3-iD.png",B="/knowledge-map/assets/image21.DS4Rfat2.png",A=JSON.parse('{"title":"MySQL","description":"","frontmatter":{"next":{"text":"MySQL 环境搭建","link":"/backend/mysql/basic02"}},"headers":[],"relativePath":"backend/mysql/basic01.md","filePath":"backend/mysql/basic01.md","lastUpdated":1717586181000}'),D={name:"backend/mysql/basic01.md"},w=r('<h1 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h1><p><strong>符号说明</strong></p><ul><li>✅ 需要学习者<strong>掌握</strong>的知识点；</li><li>❤️ 高级开发者需要<strong>重点掌握</strong>的知识点；</li><li>🚀 需要学习者<strong>理解</strong>的知识点；</li><li>⭐ 需要学习者<strong>了解</strong>的知识点；</li><li>❌ 拓展知识点，可以不用学习；</li></ul><div class="warning custom-block"><p class="custom-block-title">备注</p><ul><li>本文内容来自于尚硅谷 MySQL 教程</li></ul></div><h1 id="第-01-章-数据库概述" tabindex="-1">第 01 章 数据库概述 <a class="header-anchor" href="#第-01-章-数据库概述" aria-label="Permalink to &quot;第 01 章 数据库概述&quot;">​</a></h1><h2 id="_1-为什么要使用数据库" tabindex="-1">1. 为什么要使用数据库 <a class="header-anchor" href="#_1-为什么要使用数据库" aria-label="Permalink to &quot;1. 为什么要使用数据库&quot;">​</a></h2><ul><li>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企 业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘上加以&quot;固化&quot;</strong>，而持久化的实现过程大多 通过各种关系数据库来完成。</li><li>持久化的主要作用是<strong>将内存中的数据存储在关系型数据库中</strong>，当然也可以存储在磁盘文件、XML 数 据文件中。</li></ul><p><img src="'+n+'" alt="alt text" loading="lazy"></p><h2 id="_2-数据库与数据库管理系统" tabindex="-1">2. 数据库与数据库管理系统 <a class="header-anchor" href="#_2-数据库与数据库管理系统" aria-label="Permalink to &quot;2. 数据库与数据库管理系统&quot;">​</a></h2><h3 id="_2-1-数据库的相关概念" tabindex="-1">2.1 数据库的相关概念 <a class="header-anchor" href="#_2-1-数据库的相关概念" aria-label="Permalink to &quot;2.1 数据库的相关概念&quot;">​</a></h3><ul><li><p>DB：数据库（Database）</p><p>即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</p></li><li><p>DBMS：数据库管理系统（Database Management System）</p><p>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据。</p></li><li><p>SQL：结构化查询语言（Structured Query Language）</p><p>专门用来与数据库通信的语言。</p></li></ul><h3 id="_2-2-数据库与数据库管理系统的关系" tabindex="-1">2.2 数据库与数据库管理系统的关系 <a class="header-anchor" href="#_2-2-数据库与数据库管理系统的关系" aria-label="Permalink to &quot;2.2 数据库与数据库管理系统的关系&quot;">​</a></h3><p>数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p><p>数据库管理系统、数据库和表的关系如图所示：</p><p><img src="'+p+'" alt="alt text" loading="lazy"></p><p><img src="'+d+'" alt="alt text" loading="lazy"></p><h3 id="_2-3-常见的数据库管理系统排名-dbms" tabindex="-1">2.3 常见的数据库管理系统排名(DBMS) <a class="header-anchor" href="#_2-3-常见的数据库管理系统排名-dbms" aria-label="Permalink to &quot;2.3 常见的数据库管理系统排名(DBMS)&quot;">​</a></h3><p>目前互联网上常见的数据库管理软件有 Oracle、MySQL、MS SQL Server、DB2、PostgreSQL、Access、Sybase、Informix 这几种。以下是 2021 年 DB-Engines Ranking 对各数据库受欢迎程度进行调查后的统计结 果：（查看数据库最新排名: <a href="https://db-engines.com/en/ranking" target="_blank" rel="noreferrer">https://db-engines.com/en/ranking</a>）</p><p><img src="'+h+'" alt="alt text" loading="lazy"></p><p>对应的走势图：<a href="https://db-engines.com/en/ranking_trend" target="_blank" rel="noreferrer">https://db-engines.com/en/ranking_trend</a></p><p><img src="'+c+'" alt="alt text" loading="lazy"></p><h3 id="_2-4-常见的数据库介绍" tabindex="-1">2.4 常见的数据库介绍 <a class="header-anchor" href="#_2-4-常见的数据库介绍" aria-label="Permalink to &quot;2.4 常见的数据库介绍&quot;">​</a></h3><h4 id="oracle" tabindex="-1">Oracle <a class="header-anchor" href="#oracle" aria-label="Permalink to &quot;Oracle&quot;">​</a></h4><p>1979 年，Oracle 2 诞生，它是第一个商用的 RDBMS（关系型数据库管理系统）。随着 Oracle 软件的名气越来越大，公司也改名叫 Oracle 公司。</p><p>2007 年，总计 85 亿美金收购 BEA Systems。</p><p>2009 年，总计 74 亿美金收购 SUN。此前的 2008 年，SUN 以 10 亿美金收购 MySQL。意味着 Oracle 同时拥有了 MySQL 的管理权，至此 Oracle 在数据库领域中成为绝对的领导者。</p><p>2013 年，甲骨文超越 IBM，成为继 Microsoft 后全球第二大软件公司。</p><p>如今 Oracle 的年收入达到了 400 亿美金，足以证明商用（收费）数据库软件的价值。</p><h4 id="sql-server" tabindex="-1">SQL Server <a class="header-anchor" href="#sql-server" aria-label="Permalink to &quot;SQL Server&quot;">​</a></h4><p>SQL Server 是微软开发的大型商业数据库，诞生于 1989 年。C#、.net 等语言常使用，与 WinNT 完全集成，也可以很好地与 Microsoft BackOffice 产品集成。</p><h4 id="db2" tabindex="-1">DB2 <a class="header-anchor" href="#db2" aria-label="Permalink to &quot;DB2&quot;">​</a></h4><p>IBM 公司的数据库产品,收费的。常应用在银行系统中。</p><h4 id="postgresql" tabindex="-1">PostgreSQL <a class="header-anchor" href="#postgresql" aria-label="Permalink to &quot;PostgreSQL&quot;">​</a></h4><p>PostgreSQL 的稳定性极强，最符合 SQL 标准，开放源码，具备商业级 DBMS 质量。PG 对数据量大的文本以及 SQL 处理较快。</p><h4 id="sybase" tabindex="-1">SyBase <a class="header-anchor" href="#sybase" aria-label="Permalink to &quot;SyBase&quot;">​</a></h4><p>已经淡出历史舞台。提供了一个非常专业数据建模的工具 PowerDesigner。</p><h4 id="sqlite" tabindex="-1">SQLite <a class="header-anchor" href="#sqlite" aria-label="Permalink to &quot;SQLite&quot;">​</a></h4><p>嵌入式的小型数据库，应用在手机端。 零配置，SQlite3 不用安装，不用配置，不用启动，关闭或者配置数据库实例。当系统崩溃后不用做任何恢复操作，再下次使用数据库的时候自动恢复。</p><h4 id="informix" tabindex="-1">informix <a class="header-anchor" href="#informix" aria-label="Permalink to &quot;informix&quot;">​</a></h4><p>IBM 公司出品，取自 Information 和 Unix 的结合，它是第一个被移植到 Linux 上的商业数据库产品。仅运行于 unix/linux 平台，命令行操作。 性能较高，支持集群，适应于安全性要求极高的系统，尤其是银行，证 f 券系统的应用。</p><h2 id="_3-mysql-介绍" tabindex="-1">3. MySQL 介绍 <a class="header-anchor" href="#_3-mysql-介绍" aria-label="Permalink to &quot;3. MySQL 介绍&quot;">​</a></h2><h3 id="_3-1-概述" tabindex="-1">3.1 概述 <a class="header-anchor" href="#_3-1-概述" aria-label="Permalink to &quot;3.1 概述&quot;">​</a></h3><ul><li>MySQL 是一个 开放源代码的关系型数据库管理系统 ，由瑞典 MySQL AB（创始人 Michael Widenius）公 司 1995 年开发，迅速成为开源数据库的 No.1。</li><li>2008 被 Sun 收购（10 亿美金），2009 年 Sun 被 Oracle 收购。 MariaDB 应运而生。（MySQL 的创 造者担心 MySQL 有闭源的风险，因此创建了 MySQL 的分支项目 MariaDB）</li><li>MySQL6.x 版本之后分为 社区版 和 商业版 。</li><li>MySQL 是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库 内，这样就增加了速度并提高了灵活性。</li><li>MySQL 是开源的，所以你不需要支付额外的费用。</li><li>MySQL 是可以定制的，采用了 GPL（GNU General Public License） 协议，你可以修改源码来 开发自己的 MySQL 系统。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB ，64 位系 统支持最大的表文件为 8TB 。</li><li>MySQL 使用 标准的 SQL 数据语言 形式。</li><li>MySQL 可以允许运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、 Java、Perl、PHP 和 Ruby 等。</li></ul><h3 id="_3-2-mysql-发展史重大事件" tabindex="-1">3.2 MySQL 发展史重大事件 <a class="header-anchor" href="#_3-2-mysql-发展史重大事件" aria-label="Permalink to &quot;3.2 MySQL 发展史重大事件&quot;">​</a></h3><p>MySQL 的历史就是整个互联网的发展史。互联网业务从社交领域、电商领域到金融领域的发展，推动着 应用对数据库的需求提升，对传统的数据库服务能力提出了挑战。高并发、高性能、高可用、轻资源、 易维护、易扩展的需求，促进了 MySQL 的长足发展。</p><p><img src="'+m+'" alt="alt text" loading="lazy"></p><h3 id="_3-3-关于-mysql-8-0" tabindex="-1">3.3 关于 MySQL 8.0 <a class="header-anchor" href="#_3-3-关于-mysql-8-0" aria-label="Permalink to &quot;3.3 关于 MySQL 8.0&quot;">​</a></h3><p>MySQL 从 5.7 版本直接跳跃发布了 8.0 版本 ，可见这是一个令人兴奋的里程碑版本。MySQL 8 版本在功能上 做了显著的改进与增强，开发者对 MySQL 的源代码进行了重构，最突出的一点是多 MySQL Optimizer 优化 器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="_3-4-why-choose-mysql" tabindex="-1">3.4 Why choose MySQL? <a class="header-anchor" href="#_3-4-why-choose-mysql" aria-label="Permalink to &quot;3.4 Why choose MySQL?&quot;">​</a></h3><p><img src="'+g+'" alt="alt text" loading="lazy"></p><p>为什么如此多的厂商要选用 MySQL？大概总结的原因主要有以下几点：</p><ol><li>开放源代码，使用成本低。</li><li>性能卓越，服务稳定。</li><li>软件体积小，使用简单，并且易于维护。</li><li>历史悠久，社区用户非常活跃，遇到问题可以寻求帮助。</li><li>许多互联网公司在用，经过了时间的验证。</li></ol><h3 id="_3-5-oracle-vs-mysql" tabindex="-1">3.5 Oracle vs MySQL <a class="header-anchor" href="#_3-5-oracle-vs-mysql" aria-label="Permalink to &quot;3.5 Oracle vs MySQL&quot;">​</a></h3><p>Oracle 更适合大型跨国企业的使用，因为他们对费用不敏感，但是对性能要求以及安全性有更高的要 求。</p><p>MySQL 由于其体积小、速度快、总体拥有成本低，可处理上千万条记录的大型数据库，尤其是开放源码 这一特点，使得很多互联网公司、中小型网站选择了 MySQL 作为网站数据库（Facebook，Twitter， YouTube，阿里巴巴/蚂蚁金服，去哪儿，美团外卖，腾讯）。</p><h2 id="_4-rdbms-与-非-rdbms" tabindex="-1">4. RDBMS 与 非 RDBMS <a class="header-anchor" href="#_4-rdbms-与-非-rdbms" aria-label="Permalink to &quot;4. RDBMS 与 非 RDBMS&quot;">​</a></h2><p>从排名中我们能看出来，关系型数据库绝对是 DBMS 的主流，其中使用最多的 DBMS 分别是 Oracle、 MySQL 和 SQL Server。这些都是关系型数据库（RDBMS）。</p><h3 id="_4-1-关系型数据库-rdbms" tabindex="-1">4.1 关系型数据库(RDBMS) <a class="header-anchor" href="#_4-1-关系型数据库-rdbms" aria-label="Permalink to &quot;4.1 关系型数据库(RDBMS)&quot;">​</a></h3><h4 id="_4-1-1-实质" tabindex="-1">4.1.1 实质 <a class="header-anchor" href="#_4-1-1-实质" aria-label="Permalink to &quot;4.1.1 实质&quot;">​</a></h4><ul><li>这种类型的数据库是 最古老 的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的 二元关系 （即二维表格形式）。</li></ul><p><img src="'+u+'" alt="alt text" loading="lazy"></p><ul><li><p>关系型数据库以 行(row) 和 列(column) 的形式存储数据，以便于用户理解。这一系列的行和列被 称为 表(table) ，一组表组成了一个库(database)。</p></li><li><p>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用 关系模型 来表示。关系型数据库，就是建立在 关系模型 基础上的数据库。</p></li><li><p>SQL 就是关系型数据库的查询语言。</p></li></ul><p><img src="'+S+'" alt="alt text" loading="lazy"></p><h4 id="_4-1-2-优势" tabindex="-1">4.1.2 优势 <a class="header-anchor" href="#_4-1-2-优势" aria-label="Permalink to &quot;4.1.2 优势&quot;">​</a></h4><ul><li><strong>复杂查询</strong> 可以用 SQL 语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li><strong>事务支持</strong> 使得对于安全性能很高的数据访问要求得以实现。</li></ul><h3 id="_4-2-非关系型数据库-非-rdbms" tabindex="-1">4.2 非关系型数据库(非 RDBMS) <a class="header-anchor" href="#_4-2-非关系型数据库-非-rdbms" aria-label="Permalink to &quot;4.2 非关系型数据库(非 RDBMS)&quot;">​</a></h3><h4 id="_4-2-1-介绍" tabindex="-1">4.2.1 介绍 <a class="header-anchor" href="#_4-2-1-介绍" aria-label="Permalink to &quot;4.2.1 介绍&quot;">​</a></h4><p>非关系型数据库，可看成传统关系型数据库的功能 阉割版本 ，基于键值对存储数据，不需要经过 SQL 层 的解析， 性能非常高 。同时，通过减少不常用的功能，进一步提高性能。</p><p>目前基本上大部分主流的非关系型数据库都是免费的。</p><h4 id="_4-2-2-有哪些非关系型数据库" tabindex="-1">4.2.2 有哪些非关系型数据库 <a class="header-anchor" href="#_4-2-2-有哪些非关系型数据库" aria-label="Permalink to &quot;4.2.2 有哪些非关系型数据库&quot;">​</a></h4><p>相比于 SQL，NoSQL 泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和 列存储等，除此以外还包括图形数据库。也只有用 NoSQL 一词才能将这些技术囊括进来。</p><p><strong>键值型数据库</strong></p><p>键值型数据库通过 Key-Value 键值的方式来存储数据，其中 Key 和 Value 可以是简单的对象，也可以是复 杂的对象。Key 作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法 像关系型数据库一样使用条件过滤（比如 WHERE），如果你不知道去哪里找数据，就要遍历所有的键， 这就会消耗大量的计算。</p><p>键值型数据库典型的使用场景是作为 内存缓存 。 Redis 是最流行的键值型数据库。</p><p><img src="'+_+'" alt="alt text" loading="lazy"></p><p><strong>文档型数据库</strong></p><p>此类数据库可存放并获取文档，可以是 XML、JSON 等格式。在数据库中文档作为处理信息的基本单位， 一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB 是最流行的文档型数据库。此外，还有 CouchDB 等。</p><p><strong>搜索引擎数据库</strong></p><p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在 搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检 索的时候才能保证性能最优。核心原理是“倒排索引”。</p><p>典型产品：Solr、Elasticsearch、Splunk 等。</p><p><strong>列式数据库</strong></p><p>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server 等数据库都是采用的行式存储 （Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的 I/O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase 等。</p><p><img src="'+b+'" alt="alt text" loading="lazy"></p><p><strong>图形数据库</strong></p><p>图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社 交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关 系问题。</p><p>图形数据库顾名思义，就是一种存储图形关系的数据库。它利用了图这种数据结构存储了实体（对象） 之间的关系。关系型数据用于存储明确关系的数据，但对于复杂关系的数据存储却有些力不从心。如社 交网络中人物之间的关系，如果用关系型数据库则非常复杂，用图形数据库将非常简单。典型产品： Neo4J、InfoGrid 等。</p><p><img src="'+y+'" alt="alt text" loading="lazy"></p><h4 id="_4-2-3-nosql-的演变" tabindex="-1">4.2.3 NoSQL 的演变 <a class="header-anchor" href="#_4-2-3-nosql-的演变" aria-label="Permalink to &quot;4.2.3 NoSQL 的演变&quot;">​</a></h4><p>由于 SQL 一直称霸 DBMS，因此许多人在思考是否有一种数据库技术能远离 SQL，于是 NoSQL 诞生了， 但是随着发展却发现越来越离不开 SQL。到目前为止 NoSQL 阵营中的 DBMS 都会有实现类似 SQL 的功 能。下面是“NoSQL”这个名词在不同时期的诠释，从这些释义的变化中可以看出 NoSQL 功能的演变 ：</p><p>1970：NoSQL = We have no SQL</p><p>1980：NoSQL = Know SQL</p><p>2000：NoSQL = No SQL!</p><p>2005：NoSQL = Not only SQL</p><p>2013：NoSQL = No, SQL!</p><p>NoSQL 对 SQL 做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据 库功能，非关系型数据库的功能就足够使用了。这种情况下，使用 性能更高 、 成本更低 的非关系型数据 库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><h3 id="_4-3-小结" tabindex="-1">4.3 小结 <a class="header-anchor" href="#_4-3-小结" aria-label="Permalink to &quot;4.3 小结&quot;">​</a></h3><p>NoSQL 的分类很多，即便如此，在 DBMS 排名中，还是 SQL 阵营的比重更大，影响力前 5 的 DBMS 中有 4 个是关系型数据库，而排名前 20 的 DBMS 中也有 12 个是关系型数据库。所以说，掌握 SQL 是非常有 必要的。整套课程将围绕 SQL 展开。</p><h2 id="_5-关系型数据库设计规则" tabindex="-1">5. 关系型数据库设计规则 <a class="header-anchor" href="#_5-关系型数据库设计规则" aria-label="Permalink to &quot;5. 关系型数据库设计规则&quot;">​</a></h2><ul><li>关系型数据库的典型数据结构就是 数据表 ，这些数据表的组成都是结构化的（Structured）。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似 Java 和 Python 中 “类”的设计。</li></ul><h3 id="_5-1-表、记录、字段" tabindex="-1">5.1 表、记录、字段 <a class="header-anchor" href="#_5-1-表、记录、字段" aria-label="Permalink to &quot;5.1 表、记录、字段&quot;">​</a></h3><ul><li>E-R（entity-relationship，实体-联系）模型中有三个主要概念是： 实体集 、 属性 、 联系集 。</li><li>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表 中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列 （column），也称为一个字段（field）。</li></ul><p><img src="'+q+'" alt="alt text" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ORM 思想 (Object Relational Mapping)体现：</p><ul><li>数据库中的一个表 &lt;---&gt; Java 或 Python 中的一个类</li><li>表中的一条数据 &lt;---&gt; 类中的一个对象（或实体）</li><li>表中的一个列 &lt;----&gt; 类中的一个字段、属性(field)</li></ul></div><h3 id="_5-2-表的关联关系" tabindex="-1">5.2 表的关联关系 <a class="header-anchor" href="#_5-2-表的关联关系" aria-label="Permalink to &quot;5.2 表的关联关系&quot;">​</a></h3><ul><li>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</li><li>四种：一对一关联、一对多关联、多对多关联、自我引用</li></ul><h4 id="_5-2-1-一对一关联-one-to-one" tabindex="-1">5.2.1 一对一关联（one-to-one） <a class="header-anchor" href="#_5-2-1-一对一关联-one-to-one" aria-label="Permalink to &quot;5.2.1 一对一关联（one-to-one）&quot;">​</a></h4><ul><li>在实际的开发中应用不多，因为一对一可以创建成一张表。</li><li>举例：设计 学生表 ：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、... <ul><li>拆为两个表：两个表的记录是一一对应关系。</li><li>基础信息表 （常用信息）：学号、姓名、手机号码、班级、系别</li><li>档案信息表 （不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、...</li></ul></li><li>两种建表原则： <ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul><p><img src="'+L+'" alt="alt text" loading="lazy"></p><h4 id="_5-2-2-一对多关系-one-to-many" tabindex="-1">5.2.2 一对多关系（one-to-many） <a class="header-anchor" href="#_5-2-2-一对多关系-one-to-many" aria-label="Permalink to &quot;5.2.2 一对多关系（one-to-many）&quot;">​</a></h4><ul><li>常见实例场景： 客户表和订单表 ， 分类表和商品表 ， 部门表和员工表 。</li><li>举例： <ul><li>员工表：编号、姓名、...、所属部门</li><li>部门表：编号、名称、简介</li></ul></li><li>一对多建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键</li></ul><p><img src="'+Q+'" alt="alt text" loading="lazy"></p><p><img src="'+k+'" alt="alt text" loading="lazy"></p><p><img src="'+M+'" alt="alt text" loading="lazy"></p><h4 id="_5-2-3-多对多-many-to-many" tabindex="-1">5.2.3 多对多（many-to-many） <a class="header-anchor" href="#_5-2-3-多对多-many-to-many" aria-label="Permalink to &quot;5.2.3 多对多（many-to-many）&quot;">​</a></h4><p>要表示多对多关系，必须创建第三个表，该表通常称为 联接表 ，它将多对多关系划分为两个一对多关 系。将这两个表的主键都插入到第三个表中。</p><p><img src="'+x+'" alt="alt text" loading="lazy"></p><ul><li>举例 1：学生-课程 <ul><li>学生信息表 ：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别...）</li><li>课程信息表 ：一行代表一个课程的信息（课程编号、授课老师、简介...）</li><li>选课信息表 ：一个学生可以选多门课，一门课可以被多个学生选择</li></ul></li></ul><table tabindex="0"><thead><tr><th>学号</th><th>课程编号</th></tr></thead><tbody><tr><td>1</td><td>1001</td></tr><tr><td>2</td><td>1001</td></tr><tr><td>1</td><td>1002</td></tr></tbody></table><ul><li><p>举例 2：产品-订单</p><p>“订单”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来 定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。</p><ul><li>产品表 ：“产品”表中的每条记录表示一个产品。</li><li>订单表 ：“订单”表中的每条记录表示一个订单。</li><li>订单明细表 ：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中。一个订单可以与“产品”表中的多条记录对应，即包含多个产品。</li></ul></li></ul><p><img src="'+f+'" alt="alt text" loading="lazy"></p><ul><li>举例 3：用户-角色</li></ul><p>多对多关系建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向 各自一方的主键。</p><p><img src="'+P+'" alt="alt text" loading="lazy"></p><h4 id="_5-2-4-自我引用-self-reference" tabindex="-1">5.2.4 自我引用(Self reference) <a class="header-anchor" href="#_5-2-4-自我引用-self-reference" aria-label="Permalink to &quot;5.2.4 自我引用(Self reference)&quot;">​</a></h4><p><img src="'+B+'" alt="alt text" loading="lazy"></p>',125);function N(z,v,O,R,C,I){const l=e("a-back-top"),t=e("reading-progress-bar");return s(),o("div",null,[w,a(l),a(t)])}const K=i(D,[["render",N]]);export{A as __pageData,K as default};
